// vite.config.ts
import { defineConfig } from "file:///Users/andreigrini/projects/gold-timer/node_modules/vitest/dist/config.js";
import { loadEnv } from "file:///Users/andreigrini/projects/gold-timer/node_modules/vite/dist/node/index.js";
import * as path from "path";
import react from "file:///Users/andreigrini/projects/gold-timer/node_modules/@vitejs/plugin-react/dist/index.mjs";
import macrosPlugin from "file:///Users/andreigrini/projects/gold-timer/node_modules/vite-plugin-babel-macros/dist/plugin.js";

// vite.outputPluginStats.plugin.ts
var outputPluginStats = () => ({
  name: "output-plugin-stats",
  configResolved(config) {
    const plugins = config.plugins.map((plugin) => plugin.name);
    console.warn(`Your project has ${plugins.length} Vite plugins.`);
    console.table(plugins);
  }
});

// vite.requestAnalytics.plugin.ts
var requestAnalytics = () => ({
  name: "request-analytics",
  configureServer(server) {
    return () => {
      console.table(server.config.env);
      server.middlewares.use((req, _res, next) => {
        console.warn(`${req.method.toUpperCase()} ${req.url}`);
        next();
      });
    };
  }
});

// vite.hotUpdateReport.plugin.ts
var hotUpdateReport = () => ({
  name: "hot-update-report",
  handleHotUpdate(hmrContext) {
    console.warn(`${hmrContext.timestamp}: ${hmrContext.modules.length} module(s) updated`);
  }
});

// vite.config.ts
var __vite_injected_original_dirname = "/Users/andreigrini/projects/gold-timer";
var vite_config_default = ({ mode }) => {
  process.env = { ...process.env, ...loadEnv(mode, process.cwd()) };
  return defineConfig({
    server: {
      host: "0.0.0.0",
      port: process.env.VITE_PORT ? Number(process.env.VITE_PORT) : 9999
    },
    plugins: [
      react({
        babel: {
          presets: ["jotai/babel/preset"]
        }
      }),
      macrosPlugin(),
      requestAnalytics(),
      outputPluginStats(),
      hotUpdateReport()
    ],
    test: {
      globals: true,
      environment: "jsdom",
      setupFiles: "./tests/setup"
    },
    resolve: {
      alias: [
        { find: "@", replacement: path.resolve(__vite_injected_original_dirname, "src") },
        { find: "tests", replacement: path.resolve(__vite_injected_original_dirname, "tests") }
      ]
    },
    css: {
      preprocessorOptions: {
        less: {
          javascriptEnabled: true,
          additionalData: "@root-entry-name: default;"
        }
      }
    },
    build: {
      sourcemap: true,
      chunkSizeWarningLimit: 1500,
      rollupOptions: {
        // temporary fix to ignore warnings related to source maps
        onwarn(warning, defaultHandler) {
          if (warning.code === "SOURCEMAP_ERROR") {
            return;
          }
          defaultHandler(warning);
        },
        output: {
          manualChunks: {
            antd: ["antd"],
            "react-day-picker": ["react-day-picker"]
          }
        }
      }
    },
    define: { global }
  });
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
