// vite.config.ts
import { defineConfig, loadEnv } from "file:///Users/andreigrini/projects/gold-timer/node_modules/vite/dist/node/index.js";
import * as path from "path";
import react from "file:///Users/andreigrini/projects/gold-timer/node_modules/@vitejs/plugin-react/dist/index.mjs";
import macrosPlugin from "file:///Users/andreigrini/projects/gold-timer/node_modules/vite-plugin-babel-macros/dist/plugin.js";

// vite.outputPluginStats.plugin.ts
var outputPluginStats = () => ({
  name: "output-plugin-stats",
  configResolved(config) {
    const plugins = config.plugins.map((plugin) => plugin.name);
    console.warn(`Your project has ${plugins.length} Vite plugins.`);
    console.table(plugins);
  }
});

// vite.requestAnalytics.plugin.ts
var requestAnalytics = () => ({
  name: "request-analytics",
  configureServer(server) {
    return () => {
      console.table(server.config.env);
      server.middlewares.use((req, _res, next) => {
        console.warn(`${req.method.toUpperCase()} ${req.url}`);
        next();
      });
    };
  }
});

// vite.hotUpdateReport.plugin.ts
var hotUpdateReport = () => ({
  name: "hot-update-report",
  handleHotUpdate(hmrContext) {
    console.warn(`${hmrContext.timestamp}: ${hmrContext.modules.length} module(s) updated`);
  }
});

// vite.config.ts
var __vite_injected_original_dirname = "/Users/andreigrini/projects/gold-timer";
var vite_config_default = ({ mode }) => {
  process.env = { ...process.env, ...loadEnv(mode, process.cwd()) };
  return defineConfig({
    server: {
      host: "0.0.0.0",
      port: +process.env.VITE_PORT || 9999
    },
    plugins: [react(), macrosPlugin(), requestAnalytics(), outputPluginStats(), hotUpdateReport()],
    resolve: {
      alias: [{ find: "@", replacement: path.resolve(__vite_injected_original_dirname, "src") }]
    },
    css: {
      preprocessorOptions: {
        less: {
          javascriptEnabled: true,
          additionalData: "@root-entry-name: default;"
        }
      }
    },
    esbuild: {},
    build: {
      sourcemap: true,
      chunkSizeWarningLimit: 1500,
      rollupOptions: {
        output: {
          manualChunks: {
            antd: ["antd"],
            "react-day-picker": ["react-day-picker"]
          }
        }
      }
    }
  });
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAidml0ZS5vdXRwdXRQbHVnaW5TdGF0cy5wbHVnaW4udHMiLCAidml0ZS5yZXF1ZXN0QW5hbHl0aWNzLnBsdWdpbi50cyIsICJ2aXRlLmhvdFVwZGF0ZVJlcG9ydC5wbHVnaW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvYW5kcmVpZ3JpbmkvcHJvamVjdHMvZ29sZC10aW1lclwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1VzZXJzL2FuZHJlaWdyaW5pL3Byb2plY3RzL2dvbGQtdGltZXIvdml0ZS5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL1VzZXJzL2FuZHJlaWdyaW5pL3Byb2plY3RzL2dvbGQtdGltZXIvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcsIGxvYWRFbnYgfSBmcm9tICd2aXRlJ1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHJlYWN0IGZyb20gJ0B2aXRlanMvcGx1Z2luLXJlYWN0J1xuaW1wb3J0IG1hY3Jvc1BsdWdpbiBmcm9tICd2aXRlLXBsdWdpbi1iYWJlbC1tYWNyb3MnXG5pbXBvcnQgeyBvdXRwdXRQbHVnaW5TdGF0cyB9IGZyb20gJy4vdml0ZS5vdXRwdXRQbHVnaW5TdGF0cy5wbHVnaW4nXG5pbXBvcnQgeyByZXF1ZXN0QW5hbHl0aWNzIH0gZnJvbSAnLi92aXRlLnJlcXVlc3RBbmFseXRpY3MucGx1Z2luJ1xuaW1wb3J0IHsgaG90VXBkYXRlUmVwb3J0IH0gZnJvbSAnLi92aXRlLmhvdFVwZGF0ZVJlcG9ydC5wbHVnaW4nXG5cbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXG5leHBvcnQgZGVmYXVsdCAoeyBtb2RlIH0pID0+IHtcbiAgICBwcm9jZXNzLmVudiA9IHsgLi4ucHJvY2Vzcy5lbnYsIC4uLmxvYWRFbnYobW9kZSwgcHJvY2Vzcy5jd2QoKSkgfVxuXG4gICAgLy8gaW1wb3J0Lm1ldGEuZW52LlZJVEVfTkFNRSBhdmFpbGFibGUgaGVyZSB3aXRoOiBwcm9jZXNzLmVudi5WSVRFX05BTUVcbiAgICAvLyBpbXBvcnQubWV0YS5lbnYuVklURV9QT1JUIGF2YWlsYWJsZSBoZXJlIHdpdGg6IHByb2Nlc3MuZW52LlZJVEVfUE9SVFxuXG4gICAgcmV0dXJuIGRlZmluZUNvbmZpZyh7XG4gICAgICAgIHNlcnZlcjoge1xuICAgICAgICAgICAgaG9zdDogJzAuMC4wLjAnLFxuICAgICAgICAgICAgcG9ydDogK3Byb2Nlc3MuZW52LlZJVEVfUE9SVCB8fCA5OTk5LFxuICAgICAgICB9LFxuXG4gICAgICAgIHBsdWdpbnM6IFtyZWFjdCgpLCBtYWNyb3NQbHVnaW4oKSwgcmVxdWVzdEFuYWx5dGljcygpLCBvdXRwdXRQbHVnaW5TdGF0cygpLCBob3RVcGRhdGVSZXBvcnQoKV0sXG4gICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgIGFsaWFzOiBbeyBmaW5kOiAnQCcsIHJlcGxhY2VtZW50OiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnc3JjJykgfV0sXG4gICAgICAgIH0sXG4gICAgICAgIGNzczoge1xuICAgICAgICAgICAgcHJlcHJvY2Vzc29yT3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGxlc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgamF2YXNjcmlwdEVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxEYXRhOiAnQHJvb3QtZW50cnktbmFtZTogZGVmYXVsdDsnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBlc2J1aWxkOiB7fSxcbiAgICAgICAgYnVpbGQ6IHtcbiAgICAgICAgICAgIHNvdXJjZW1hcDogdHJ1ZSxcbiAgICAgICAgICAgIGNodW5rU2l6ZVdhcm5pbmdMaW1pdDogMTUwMCxcbiAgICAgICAgICAgIHJvbGx1cE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBvdXRwdXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgbWFudWFsQ2h1bmtzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbnRkOiBbJ2FudGQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdyZWFjdC1kYXktcGlja2VyJzogWydyZWFjdC1kYXktcGlja2VyJ10sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSlcbn1cbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2FuZHJlaWdyaW5pL3Byb2plY3RzL2dvbGQtdGltZXJcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9Vc2Vycy9hbmRyZWlncmluaS9wcm9qZWN0cy9nb2xkLXRpbWVyL3ZpdGUub3V0cHV0UGx1Z2luU3RhdHMucGx1Z2luLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9hbmRyZWlncmluaS9wcm9qZWN0cy9nb2xkLXRpbWVyL3ZpdGUub3V0cHV0UGx1Z2luU3RhdHMucGx1Z2luLnRzXCI7aW1wb3J0IHsgUmVzb2x2ZWRDb25maWcgfSBmcm9tICd2aXRlJ1xuXG5leHBvcnQgY29uc3Qgb3V0cHV0UGx1Z2luU3RhdHMgPSAoKSA9PiAoe1xuICAgIG5hbWU6ICdvdXRwdXQtcGx1Z2luLXN0YXRzJyxcbiAgICBjb25maWdSZXNvbHZlZChjb25maWc6IFJlc29sdmVkQ29uZmlnKSB7XG4gICAgICAgIGNvbnN0IHBsdWdpbnMgPSBjb25maWcucGx1Z2lucy5tYXAoKHBsdWdpbikgPT4gcGx1Z2luLm5hbWUpXG4gICAgICAgIGNvbnNvbGUud2FybihgWW91ciBwcm9qZWN0IGhhcyAke3BsdWdpbnMubGVuZ3RofSBWaXRlIHBsdWdpbnMuYClcbiAgICAgICAgY29uc29sZS50YWJsZShwbHVnaW5zKVxuICAgIH0sXG59KVxuIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvYW5kcmVpZ3JpbmkvcHJvamVjdHMvZ29sZC10aW1lclwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1VzZXJzL2FuZHJlaWdyaW5pL3Byb2plY3RzL2dvbGQtdGltZXIvdml0ZS5yZXF1ZXN0QW5hbHl0aWNzLnBsdWdpbi50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvYW5kcmVpZ3JpbmkvcHJvamVjdHMvZ29sZC10aW1lci92aXRlLnJlcXVlc3RBbmFseXRpY3MucGx1Z2luLnRzXCI7aW1wb3J0IHsgVml0ZURldlNlcnZlciB9IGZyb20gJ3ZpdGUnXG5cbmV4cG9ydCBjb25zdCByZXF1ZXN0QW5hbHl0aWNzID0gKCkgPT4gKHtcbiAgICBuYW1lOiAncmVxdWVzdC1hbmFseXRpY3MnLFxuICAgIGNvbmZpZ3VyZVNlcnZlcihzZXJ2ZXI6IFZpdGVEZXZTZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUudGFibGUoc2VydmVyLmNvbmZpZy5lbnYpXG4gICAgICAgICAgICBzZXJ2ZXIubWlkZGxld2FyZXMudXNlKChyZXEsIF9yZXMsIG5leHQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7cmVxLm1ldGhvZC50b1VwcGVyQ2FzZSgpfSAke3JlcS51cmx9YClcbiAgICAgICAgICAgICAgICBuZXh0KClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9LFxufSlcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2FuZHJlaWdyaW5pL3Byb2plY3RzL2dvbGQtdGltZXJcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9Vc2Vycy9hbmRyZWlncmluaS9wcm9qZWN0cy9nb2xkLXRpbWVyL3ZpdGUuaG90VXBkYXRlUmVwb3J0LnBsdWdpbi50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvYW5kcmVpZ3JpbmkvcHJvamVjdHMvZ29sZC10aW1lci92aXRlLmhvdFVwZGF0ZVJlcG9ydC5wbHVnaW4udHNcIjtpbXBvcnQgeyBIbXJDb250ZXh0IH0gZnJvbSAndml0ZSdcblxuZXhwb3J0IGNvbnN0IGhvdFVwZGF0ZVJlcG9ydCA9ICgpID0+ICh7XG4gICAgbmFtZTogJ2hvdC11cGRhdGUtcmVwb3J0JyxcbiAgICBoYW5kbGVIb3RVcGRhdGUoaG1yQ29udGV4dDogSG1yQ29udGV4dCkge1xuICAgICAgICBjb25zb2xlLndhcm4oYCR7aG1yQ29udGV4dC50aW1lc3RhbXB9OiAke2htckNvbnRleHQubW9kdWxlcy5sZW5ndGh9IG1vZHVsZShzKSB1cGRhdGVkYClcbiAgICB9LFxufSlcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBb1MsU0FBUyxjQUFjLGVBQWU7QUFDMVUsWUFBWSxVQUFVO0FBQ3RCLE9BQU8sV0FBVztBQUNsQixPQUFPLGtCQUFrQjs7O0FDRGxCLElBQU0sb0JBQW9CLE9BQU87QUFBQSxFQUNwQyxNQUFNO0FBQUEsRUFDTixlQUFlLFFBQXdCO0FBQ25DLFVBQU0sVUFBVSxPQUFPLFFBQVEsSUFBSSxDQUFDLFdBQVcsT0FBTyxJQUFJO0FBQzFELFlBQVEsS0FBSyxvQkFBb0IsUUFBUSxzQkFBc0I7QUFDL0QsWUFBUSxNQUFNLE9BQU87QUFBQSxFQUN6QjtBQUNKOzs7QUNQTyxJQUFNLG1CQUFtQixPQUFPO0FBQUEsRUFDbkMsTUFBTTtBQUFBLEVBQ04sZ0JBQWdCLFFBQXVCO0FBQ25DLFdBQU8sTUFBTTtBQUNULGNBQVEsTUFBTSxPQUFPLE9BQU8sR0FBRztBQUMvQixhQUFPLFlBQVksSUFBSSxDQUFDLEtBQUssTUFBTSxTQUFTO0FBQ3hDLGdCQUFRLEtBQUssR0FBRyxJQUFJLE9BQU8sWUFBWSxLQUFLLElBQUksS0FBSztBQUNyRCxhQUFLO0FBQUEsTUFDVCxDQUFDO0FBQUEsSUFDTDtBQUFBLEVBQ0o7QUFDSjs7O0FDWE8sSUFBTSxrQkFBa0IsT0FBTztBQUFBLEVBQ2xDLE1BQU07QUFBQSxFQUNOLGdCQUFnQixZQUF3QjtBQUNwQyxZQUFRLEtBQUssR0FBRyxXQUFXLGNBQWMsV0FBVyxRQUFRLDBCQUEwQjtBQUFBLEVBQzFGO0FBQ0o7OztBSFBBLElBQU0sbUNBQW1DO0FBU3pDLElBQU8sc0JBQVEsQ0FBQyxFQUFFLEtBQUssTUFBTTtBQUN6QixVQUFRLE1BQU0sRUFBRSxHQUFHLFFBQVEsS0FBSyxHQUFHLFFBQVEsTUFBTSxRQUFRLElBQUksQ0FBQyxFQUFFO0FBS2hFLFNBQU8sYUFBYTtBQUFBLElBQ2hCLFFBQVE7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLE1BQU0sQ0FBQyxRQUFRLElBQUksYUFBYTtBQUFBLElBQ3BDO0FBQUEsSUFFQSxTQUFTLENBQUMsTUFBTSxHQUFHLGFBQWEsR0FBRyxpQkFBaUIsR0FBRyxrQkFBa0IsR0FBRyxnQkFBZ0IsQ0FBQztBQUFBLElBQzdGLFNBQVM7QUFBQSxNQUNMLE9BQU8sQ0FBQyxFQUFFLE1BQU0sS0FBSyxhQUFrQixhQUFRLGtDQUFXLEtBQUssRUFBRSxDQUFDO0FBQUEsSUFDdEU7QUFBQSxJQUNBLEtBQUs7QUFBQSxNQUNELHFCQUFxQjtBQUFBLFFBQ2pCLE1BQU07QUFBQSxVQUNGLG1CQUFtQjtBQUFBLFVBQ25CLGdCQUFnQjtBQUFBLFFBQ3BCO0FBQUEsTUFDSjtBQUFBLElBQ0o7QUFBQSxJQUNBLFNBQVMsQ0FBQztBQUFBLElBQ1YsT0FBTztBQUFBLE1BQ0gsV0FBVztBQUFBLE1BQ1gsdUJBQXVCO0FBQUEsTUFDdkIsZUFBZTtBQUFBLFFBQ1gsUUFBUTtBQUFBLFVBQ0osY0FBYztBQUFBLFlBQ1YsTUFBTSxDQUFDLE1BQU07QUFBQSxZQUNiLG9CQUFvQixDQUFDLGtCQUFrQjtBQUFBLFVBQzNDO0FBQUEsUUFDSjtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBQUEsRUFDSixDQUFDO0FBQ0w7IiwKICAibmFtZXMiOiBbXQp9Cg==
