schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_array_comparison_exp {
  """is the array contained in the given array value"""
  _contained_in: [String!]

  """does the array contain the given value"""
  _contains: [String!]
  _eq: [String!]
  _gt: [String!]
  _gte: [String!]
  _in: [[String!]!]
  _is_null: Boolean
  _lt: [String!]
  _lte: [String!]
  _neq: [String!]
  _nin: [[String!]!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""freezed - if achievement is created, but not completed"""
type achievements {
  archived: Boolean!
  created_at: timestamptz
  deleted_at: timestamptz
  description: String!
  freezed: Boolean!

  """An object relationship"""
  hero: heroes!
  id: uuid!
  img_path: String
  is_favorite: Boolean!
  owner_id: uuid!
  title: String!
  updated_at: timestamptz
}

"""
aggregated selection of "achievements"
"""
type achievements_aggregate {
  aggregate: achievements_aggregate_fields
  nodes: [achievements!]!
}

input achievements_aggregate_bool_exp {
  bool_and: achievements_aggregate_bool_exp_bool_and
  bool_or: achievements_aggregate_bool_exp_bool_or
  count: achievements_aggregate_bool_exp_count
}

input achievements_aggregate_bool_exp_bool_and {
  arguments: achievements_select_column_achievements_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: achievements_bool_exp
  predicate: Boolean_comparison_exp!
}

input achievements_aggregate_bool_exp_bool_or {
  arguments: achievements_select_column_achievements_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: achievements_bool_exp
  predicate: Boolean_comparison_exp!
}

input achievements_aggregate_bool_exp_count {
  arguments: [achievements_select_column!]
  distinct: Boolean
  filter: achievements_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "achievements"
"""
type achievements_aggregate_fields {
  count(columns: [achievements_select_column!], distinct: Boolean): Int!
  max: achievements_max_fields
  min: achievements_min_fields
}

"""
order by aggregate values of table "achievements"
"""
input achievements_aggregate_order_by {
  count: order_by
  max: achievements_max_order_by
  min: achievements_min_order_by
}

"""
input type for inserting array relation for remote table "achievements"
"""
input achievements_arr_rel_insert_input {
  data: [achievements_insert_input!]!

  """upsert condition"""
  on_conflict: achievements_on_conflict
}

"""
Boolean expression to filter rows from the table "achievements". All fields are combined with a logical 'AND'.
"""
input achievements_bool_exp {
  _and: [achievements_bool_exp!]
  _not: achievements_bool_exp
  _or: [achievements_bool_exp!]
  archived: Boolean_comparison_exp
  created_at: timestamptz_comparison_exp
  deleted_at: timestamptz_comparison_exp
  description: String_comparison_exp
  freezed: Boolean_comparison_exp
  hero: heroes_bool_exp
  id: uuid_comparison_exp
  img_path: String_comparison_exp
  is_favorite: Boolean_comparison_exp
  owner_id: uuid_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "achievements"
"""
enum achievements_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  achievements_id_key

  """
  unique or primary key constraint on columns "id"
  """
  achievements_pkey
}

"""
input type for inserting data into table "achievements"
"""
input achievements_insert_input {
  archived: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  freezed: Boolean
  hero: heroes_obj_rel_insert_input
  id: uuid
  img_path: String
  is_favorite: Boolean
  owner_id: uuid
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type achievements_max_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  id: uuid
  img_path: String
  owner_id: uuid
  title: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "achievements"
"""
input achievements_max_order_by {
  created_at: order_by
  deleted_at: order_by
  description: order_by
  id: order_by
  img_path: order_by
  owner_id: order_by
  title: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type achievements_min_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  id: uuid
  img_path: String
  owner_id: uuid
  title: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "achievements"
"""
input achievements_min_order_by {
  created_at: order_by
  deleted_at: order_by
  description: order_by
  id: order_by
  img_path: order_by
  owner_id: order_by
  title: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "achievements"
"""
type achievements_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [achievements!]!
}

"""
on_conflict condition type for table "achievements"
"""
input achievements_on_conflict {
  constraint: achievements_constraint!
  update_columns: [achievements_update_column!]! = []
  where: achievements_bool_exp
}

"""Ordering options when selecting data from "achievements"."""
input achievements_order_by {
  archived: order_by
  created_at: order_by
  deleted_at: order_by
  description: order_by
  freezed: order_by
  hero: heroes_order_by
  id: order_by
  img_path: order_by
  is_favorite: order_by
  owner_id: order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: achievements"""
input achievements_pk_columns_input {
  id: uuid!
}

"""
select columns of table "achievements"
"""
enum achievements_select_column {
  """column name"""
  archived

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  description

  """column name"""
  freezed

  """column name"""
  id

  """column name"""
  img_path

  """column name"""
  is_favorite

  """column name"""
  owner_id

  """column name"""
  title

  """column name"""
  updated_at
}

"""
select "achievements_aggregate_bool_exp_bool_and_arguments_columns" columns of table "achievements"
"""
enum achievements_select_column_achievements_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  archived

  """column name"""
  freezed

  """column name"""
  is_favorite
}

"""
select "achievements_aggregate_bool_exp_bool_or_arguments_columns" columns of table "achievements"
"""
enum achievements_select_column_achievements_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  archived

  """column name"""
  freezed

  """column name"""
  is_favorite
}

"""
input type for updating data in table "achievements"
"""
input achievements_set_input {
  archived: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  freezed: Boolean
  id: uuid
  img_path: String
  is_favorite: Boolean
  owner_id: uuid
  title: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "achievements"
"""
input achievements_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: achievements_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input achievements_stream_cursor_value_input {
  archived: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  freezed: Boolean
  id: uuid
  img_path: String
  is_favorite: Boolean
  owner_id: uuid
  title: String
  updated_at: timestamptz
}

"""
update columns of table "achievements"
"""
enum achievements_update_column {
  """column name"""
  archived

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  description

  """column name"""
  freezed

  """column name"""
  id

  """column name"""
  img_path

  """column name"""
  is_favorite

  """column name"""
  owner_id

  """column name"""
  title

  """column name"""
  updated_at
}

input achievements_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: achievements_set_input

  """filter the rows which have to be updated"""
  where: achievements_bool_exp!
}

"""bonus modules"""
type addons {
  addon: String!

  """An object relationship"""
  addons_enum: addons_enum!

  """An object relationship"""
  hero: heroes!
  owner_id: uuid!
}

"""
aggregated selection of "addons"
"""
type addons_aggregate {
  aggregate: addons_aggregate_fields
  nodes: [addons!]!
}

input addons_aggregate_bool_exp {
  count: addons_aggregate_bool_exp_count
}

input addons_aggregate_bool_exp_count {
  arguments: [addons_select_column!]
  distinct: Boolean
  filter: addons_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "addons"
"""
type addons_aggregate_fields {
  count(columns: [addons_select_column!], distinct: Boolean): Int!
  max: addons_max_fields
  min: addons_min_fields
}

"""
order by aggregate values of table "addons"
"""
input addons_aggregate_order_by {
  count: order_by
  max: addons_max_order_by
  min: addons_min_order_by
}

"""
input type for inserting array relation for remote table "addons"
"""
input addons_arr_rel_insert_input {
  data: [addons_insert_input!]!

  """upsert condition"""
  on_conflict: addons_on_conflict
}

"""
Boolean expression to filter rows from the table "addons". All fields are combined with a logical 'AND'.
"""
input addons_bool_exp {
  _and: [addons_bool_exp!]
  _not: addons_bool_exp
  _or: [addons_bool_exp!]
  addon: String_comparison_exp
  addons_enum: addons_enum_bool_exp
  hero: heroes_bool_exp
  owner_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "addons"
"""
enum addons_constraint {
  """
  unique or primary key constraint on columns "addon", "owner_id"
  """
  addons_pkey
}

"""
columns and relationships of "addons_enum"
"""
type addons_enum {
  addon: String!

  """An array relationship"""
  addons(
    """distinct select on columns"""
    distinct_on: [addons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addons_order_by!]

    """filter the rows returned"""
    where: addons_bool_exp
  ): [addons!]!

  """An aggregate relationship"""
  addons_aggregate(
    """distinct select on columns"""
    distinct_on: [addons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addons_order_by!]

    """filter the rows returned"""
    where: addons_bool_exp
  ): addons_aggregate!
  description: String!
}

"""
aggregated selection of "addons_enum"
"""
type addons_enum_aggregate {
  aggregate: addons_enum_aggregate_fields
  nodes: [addons_enum!]!
}

"""
aggregate fields of "addons_enum"
"""
type addons_enum_aggregate_fields {
  count(columns: [addons_enum_select_column!], distinct: Boolean): Int!
  max: addons_enum_max_fields
  min: addons_enum_min_fields
}

"""
Boolean expression to filter rows from the table "addons_enum". All fields are combined with a logical 'AND'.
"""
input addons_enum_bool_exp {
  _and: [addons_enum_bool_exp!]
  _not: addons_enum_bool_exp
  _or: [addons_enum_bool_exp!]
  addon: String_comparison_exp
  addons: addons_bool_exp
  addons_aggregate: addons_aggregate_bool_exp
  description: String_comparison_exp
}

"""
unique or primary key constraints on table "addons_enum"
"""
enum addons_enum_constraint {
  """
  unique or primary key constraint on columns "addon"
  """
  addons_enum_pkey
}

"""
input type for inserting data into table "addons_enum"
"""
input addons_enum_insert_input {
  addon: String
  addons: addons_arr_rel_insert_input
  description: String
}

"""aggregate max on columns"""
type addons_enum_max_fields {
  addon: String
  description: String
}

"""aggregate min on columns"""
type addons_enum_min_fields {
  addon: String
  description: String
}

"""
response of any mutation on the table "addons_enum"
"""
type addons_enum_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [addons_enum!]!
}

"""
input type for inserting object relation for remote table "addons_enum"
"""
input addons_enum_obj_rel_insert_input {
  data: addons_enum_insert_input!

  """upsert condition"""
  on_conflict: addons_enum_on_conflict
}

"""
on_conflict condition type for table "addons_enum"
"""
input addons_enum_on_conflict {
  constraint: addons_enum_constraint!
  update_columns: [addons_enum_update_column!]! = []
  where: addons_enum_bool_exp
}

"""Ordering options when selecting data from "addons_enum"."""
input addons_enum_order_by {
  addon: order_by
  addons_aggregate: addons_aggregate_order_by
  description: order_by
}

"""primary key columns input for table: addons_enum"""
input addons_enum_pk_columns_input {
  addon: String!
}

"""
select columns of table "addons_enum"
"""
enum addons_enum_select_column {
  """column name"""
  addon

  """column name"""
  description
}

"""
input type for updating data in table "addons_enum"
"""
input addons_enum_set_input {
  addon: String
  description: String
}

"""
Streaming cursor of the table "addons_enum"
"""
input addons_enum_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: addons_enum_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input addons_enum_stream_cursor_value_input {
  addon: String
  description: String
}

"""
update columns of table "addons_enum"
"""
enum addons_enum_update_column {
  """column name"""
  addon

  """column name"""
  description
}

input addons_enum_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: addons_enum_set_input

  """filter the rows which have to be updated"""
  where: addons_enum_bool_exp!
}

"""
input type for inserting data into table "addons"
"""
input addons_insert_input {
  addon: String
  addons_enum: addons_enum_obj_rel_insert_input
  hero: heroes_obj_rel_insert_input
  owner_id: uuid
}

"""aggregate max on columns"""
type addons_max_fields {
  addon: String
  owner_id: uuid
}

"""
order by max() on columns of table "addons"
"""
input addons_max_order_by {
  addon: order_by
  owner_id: order_by
}

"""aggregate min on columns"""
type addons_min_fields {
  addon: String
  owner_id: uuid
}

"""
order by min() on columns of table "addons"
"""
input addons_min_order_by {
  addon: order_by
  owner_id: order_by
}

"""
response of any mutation on the table "addons"
"""
type addons_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [addons!]!
}

"""
on_conflict condition type for table "addons"
"""
input addons_on_conflict {
  constraint: addons_constraint!
  update_columns: [addons_update_column!]! = []
  where: addons_bool_exp
}

"""Ordering options when selecting data from "addons"."""
input addons_order_by {
  addon: order_by
  addons_enum: addons_enum_order_by
  hero: heroes_order_by
  owner_id: order_by
}

"""primary key columns input for table: addons"""
input addons_pk_columns_input {
  addon: String!
  owner_id: uuid!
}

"""
select columns of table "addons"
"""
enum addons_select_column {
  """column name"""
  addon

  """column name"""
  owner_id
}

"""
input type for updating data in table "addons"
"""
input addons_set_input {
  addon: String
  owner_id: uuid
}

"""
Streaming cursor of the table "addons"
"""
input addons_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: addons_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input addons_stream_cursor_value_input {
  addon: String
  owner_id: uuid
}

"""
update columns of table "addons"
"""
enum addons_update_column {
  """column name"""
  addon

  """column name"""
  owner_id
}

input addons_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: addons_set_input

  """filter the rows which have to be updated"""
  where: addons_bool_exp!
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""goal difficulty"""
type goal_difficulty_enum {
  description: String!
  difficulty: String!

  """An array relationship"""
  goals(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): [goals!]!

  """An aggregate relationship"""
  goals_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): goals_aggregate!
}

"""
aggregated selection of "goal_difficulty_enum"
"""
type goal_difficulty_enum_aggregate {
  aggregate: goal_difficulty_enum_aggregate_fields
  nodes: [goal_difficulty_enum!]!
}

"""
aggregate fields of "goal_difficulty_enum"
"""
type goal_difficulty_enum_aggregate_fields {
  count(columns: [goal_difficulty_enum_select_column!], distinct: Boolean): Int!
  max: goal_difficulty_enum_max_fields
  min: goal_difficulty_enum_min_fields
}

"""
Boolean expression to filter rows from the table "goal_difficulty_enum". All fields are combined with a logical 'AND'.
"""
input goal_difficulty_enum_bool_exp {
  _and: [goal_difficulty_enum_bool_exp!]
  _not: goal_difficulty_enum_bool_exp
  _or: [goal_difficulty_enum_bool_exp!]
  description: String_comparison_exp
  difficulty: String_comparison_exp
  goals: goals_bool_exp
  goals_aggregate: goals_aggregate_bool_exp
}

"""
unique or primary key constraints on table "goal_difficulty_enum"
"""
enum goal_difficulty_enum_constraint {
  """
  unique or primary key constraint on columns "difficulty"
  """
  goal_difficulty_enum_pkey
}

"""
input type for inserting data into table "goal_difficulty_enum"
"""
input goal_difficulty_enum_insert_input {
  description: String
  difficulty: String
  goals: goals_arr_rel_insert_input
}

"""aggregate max on columns"""
type goal_difficulty_enum_max_fields {
  description: String
  difficulty: String
}

"""aggregate min on columns"""
type goal_difficulty_enum_min_fields {
  description: String
  difficulty: String
}

"""
response of any mutation on the table "goal_difficulty_enum"
"""
type goal_difficulty_enum_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [goal_difficulty_enum!]!
}

"""
input type for inserting object relation for remote table "goal_difficulty_enum"
"""
input goal_difficulty_enum_obj_rel_insert_input {
  data: goal_difficulty_enum_insert_input!

  """upsert condition"""
  on_conflict: goal_difficulty_enum_on_conflict
}

"""
on_conflict condition type for table "goal_difficulty_enum"
"""
input goal_difficulty_enum_on_conflict {
  constraint: goal_difficulty_enum_constraint!
  update_columns: [goal_difficulty_enum_update_column!]! = []
  where: goal_difficulty_enum_bool_exp
}

"""Ordering options when selecting data from "goal_difficulty_enum"."""
input goal_difficulty_enum_order_by {
  description: order_by
  difficulty: order_by
  goals_aggregate: goals_aggregate_order_by
}

"""primary key columns input for table: goal_difficulty_enum"""
input goal_difficulty_enum_pk_columns_input {
  difficulty: String!
}

"""
select columns of table "goal_difficulty_enum"
"""
enum goal_difficulty_enum_select_column {
  """column name"""
  description

  """column name"""
  difficulty
}

"""
input type for updating data in table "goal_difficulty_enum"
"""
input goal_difficulty_enum_set_input {
  description: String
  difficulty: String
}

"""
Streaming cursor of the table "goal_difficulty_enum"
"""
input goal_difficulty_enum_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: goal_difficulty_enum_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input goal_difficulty_enum_stream_cursor_value_input {
  description: String
  difficulty: String
}

"""
update columns of table "goal_difficulty_enum"
"""
enum goal_difficulty_enum_update_column {
  """column name"""
  description

  """column name"""
  difficulty
}

input goal_difficulty_enum_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: goal_difficulty_enum_set_input

  """filter the rows which have to be updated"""
  where: goal_difficulty_enum_bool_exp!
}

"""goal status"""
type goal_status_enum {
  description: String!

  """An array relationship"""
  goals(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): [goals!]!

  """An aggregate relationship"""
  goals_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): goals_aggregate!
  status: String!
}

"""
aggregated selection of "goal_status_enum"
"""
type goal_status_enum_aggregate {
  aggregate: goal_status_enum_aggregate_fields
  nodes: [goal_status_enum!]!
}

"""
aggregate fields of "goal_status_enum"
"""
type goal_status_enum_aggregate_fields {
  count(columns: [goal_status_enum_select_column!], distinct: Boolean): Int!
  max: goal_status_enum_max_fields
  min: goal_status_enum_min_fields
}

"""
Boolean expression to filter rows from the table "goal_status_enum". All fields are combined with a logical 'AND'.
"""
input goal_status_enum_bool_exp {
  _and: [goal_status_enum_bool_exp!]
  _not: goal_status_enum_bool_exp
  _or: [goal_status_enum_bool_exp!]
  description: String_comparison_exp
  goals: goals_bool_exp
  goals_aggregate: goals_aggregate_bool_exp
  status: String_comparison_exp
}

"""
unique or primary key constraints on table "goal_status_enum"
"""
enum goal_status_enum_constraint {
  """
  unique or primary key constraint on columns "status"
  """
  goal_status_enum_pkey
}

"""
input type for inserting data into table "goal_status_enum"
"""
input goal_status_enum_insert_input {
  description: String
  goals: goals_arr_rel_insert_input
  status: String
}

"""aggregate max on columns"""
type goal_status_enum_max_fields {
  description: String
  status: String
}

"""aggregate min on columns"""
type goal_status_enum_min_fields {
  description: String
  status: String
}

"""
response of any mutation on the table "goal_status_enum"
"""
type goal_status_enum_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [goal_status_enum!]!
}

"""
input type for inserting object relation for remote table "goal_status_enum"
"""
input goal_status_enum_obj_rel_insert_input {
  data: goal_status_enum_insert_input!

  """upsert condition"""
  on_conflict: goal_status_enum_on_conflict
}

"""
on_conflict condition type for table "goal_status_enum"
"""
input goal_status_enum_on_conflict {
  constraint: goal_status_enum_constraint!
  update_columns: [goal_status_enum_update_column!]! = []
  where: goal_status_enum_bool_exp
}

"""Ordering options when selecting data from "goal_status_enum"."""
input goal_status_enum_order_by {
  description: order_by
  goals_aggregate: goals_aggregate_order_by
  status: order_by
}

"""primary key columns input for table: goal_status_enum"""
input goal_status_enum_pk_columns_input {
  status: String!
}

"""
select columns of table "goal_status_enum"
"""
enum goal_status_enum_select_column {
  """column name"""
  description

  """column name"""
  status
}

"""
input type for updating data in table "goal_status_enum"
"""
input goal_status_enum_set_input {
  description: String
  status: String
}

"""
Streaming cursor of the table "goal_status_enum"
"""
input goal_status_enum_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: goal_status_enum_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input goal_status_enum_stream_cursor_value_input {
  description: String
  status: String
}

"""
update columns of table "goal_status_enum"
"""
enum goal_status_enum_update_column {
  """column name"""
  description

  """column name"""
  status
}

input goal_status_enum_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: goal_status_enum_set_input

  """filter the rows which have to be updated"""
  where: goal_status_enum_bool_exp!
}

"""list of goals, finished_at - the finish estimation"""
type goals {
  created_at: timestamptz!
  deleted_at: timestamptz
  description: String!
  difficulty: String!
  finished_at: timestamptz

  """An object relationship"""
  goal_difficulty_enum: goal_difficulty_enum!

  """An object relationship"""
  goal_ritual: goals_rituals

  """An object relationship"""
  goal_status_enum: goal_status_enum!

  """An object relationship"""
  hero: heroes!
  id: uuid!
  is_favorite: Boolean!
  owner_id: uuid!
  parent_goal_id: uuid
  privacy: String

  """An object relationship"""
  privacy_enum: privacy_enum
  slogan: String!
  status: String!
  title: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "goals"
"""
type goals_aggregate {
  aggregate: goals_aggregate_fields
  nodes: [goals!]!
}

input goals_aggregate_bool_exp {
  bool_and: goals_aggregate_bool_exp_bool_and
  bool_or: goals_aggregate_bool_exp_bool_or
  count: goals_aggregate_bool_exp_count
}

input goals_aggregate_bool_exp_bool_and {
  arguments: goals_select_column_goals_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: goals_bool_exp
  predicate: Boolean_comparison_exp!
}

input goals_aggregate_bool_exp_bool_or {
  arguments: goals_select_column_goals_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: goals_bool_exp
  predicate: Boolean_comparison_exp!
}

input goals_aggregate_bool_exp_count {
  arguments: [goals_select_column!]
  distinct: Boolean
  filter: goals_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "goals"
"""
type goals_aggregate_fields {
  count(columns: [goals_select_column!], distinct: Boolean): Int!
  max: goals_max_fields
  min: goals_min_fields
}

"""
order by aggregate values of table "goals"
"""
input goals_aggregate_order_by {
  count: order_by
  max: goals_max_order_by
  min: goals_min_order_by
}

"""
input type for inserting array relation for remote table "goals"
"""
input goals_arr_rel_insert_input {
  data: [goals_insert_input!]!

  """upsert condition"""
  on_conflict: goals_on_conflict
}

"""
Boolean expression to filter rows from the table "goals". All fields are combined with a logical 'AND'.
"""
input goals_bool_exp {
  _and: [goals_bool_exp!]
  _not: goals_bool_exp
  _or: [goals_bool_exp!]
  created_at: timestamptz_comparison_exp
  deleted_at: timestamptz_comparison_exp
  description: String_comparison_exp
  difficulty: String_comparison_exp
  finished_at: timestamptz_comparison_exp
  goal_difficulty_enum: goal_difficulty_enum_bool_exp
  goal_ritual: goals_rituals_bool_exp
  goal_status_enum: goal_status_enum_bool_exp
  hero: heroes_bool_exp
  id: uuid_comparison_exp
  is_favorite: Boolean_comparison_exp
  owner_id: uuid_comparison_exp
  parent_goal_id: uuid_comparison_exp
  privacy: String_comparison_exp
  privacy_enum: privacy_enum_bool_exp
  slogan: String_comparison_exp
  status: String_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "goals"
"""
enum goals_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  goals_pkey
}

"""
input type for inserting data into table "goals"
"""
input goals_insert_input {
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  difficulty: String
  finished_at: timestamptz
  goal_difficulty_enum: goal_difficulty_enum_obj_rel_insert_input
  goal_ritual: goals_rituals_obj_rel_insert_input
  goal_status_enum: goal_status_enum_obj_rel_insert_input
  hero: heroes_obj_rel_insert_input
  id: uuid
  is_favorite: Boolean
  owner_id: uuid
  parent_goal_id: uuid
  privacy: String
  privacy_enum: privacy_enum_obj_rel_insert_input
  slogan: String
  status: String
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type goals_max_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  difficulty: String
  finished_at: timestamptz
  id: uuid
  owner_id: uuid
  parent_goal_id: uuid
  privacy: String
  slogan: String
  status: String
  title: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "goals"
"""
input goals_max_order_by {
  created_at: order_by
  deleted_at: order_by
  description: order_by
  difficulty: order_by
  finished_at: order_by
  id: order_by
  owner_id: order_by
  parent_goal_id: order_by
  privacy: order_by
  slogan: order_by
  status: order_by
  title: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type goals_min_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  difficulty: String
  finished_at: timestamptz
  id: uuid
  owner_id: uuid
  parent_goal_id: uuid
  privacy: String
  slogan: String
  status: String
  title: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "goals"
"""
input goals_min_order_by {
  created_at: order_by
  deleted_at: order_by
  description: order_by
  difficulty: order_by
  finished_at: order_by
  id: order_by
  owner_id: order_by
  parent_goal_id: order_by
  privacy: order_by
  slogan: order_by
  status: order_by
  title: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "goals"
"""
type goals_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [goals!]!
}

"""
input type for inserting object relation for remote table "goals"
"""
input goals_obj_rel_insert_input {
  data: goals_insert_input!

  """upsert condition"""
  on_conflict: goals_on_conflict
}

"""
on_conflict condition type for table "goals"
"""
input goals_on_conflict {
  constraint: goals_constraint!
  update_columns: [goals_update_column!]! = []
  where: goals_bool_exp
}

"""Ordering options when selecting data from "goals"."""
input goals_order_by {
  created_at: order_by
  deleted_at: order_by
  description: order_by
  difficulty: order_by
  finished_at: order_by
  goal_difficulty_enum: goal_difficulty_enum_order_by
  goal_ritual: goals_rituals_order_by
  goal_status_enum: goal_status_enum_order_by
  hero: heroes_order_by
  id: order_by
  is_favorite: order_by
  owner_id: order_by
  parent_goal_id: order_by
  privacy: order_by
  privacy_enum: privacy_enum_order_by
  slogan: order_by
  status: order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: goals"""
input goals_pk_columns_input {
  id: uuid!
}

"""
columns and relationships of "goals_rituals"
"""
type goals_rituals {
  created_at: timestamptz!

  """An object relationship"""
  goal: goals!
  goal_id: uuid!
  ritual_id: uuid!
  ritual_interval: Int!
  ritual_power: Int!
  ritual_type: String!

  """An object relationship"""
  ritual_type_enum: ritual_type_enum!
}

"""
aggregated selection of "goals_rituals"
"""
type goals_rituals_aggregate {
  aggregate: goals_rituals_aggregate_fields
  nodes: [goals_rituals!]!
}

input goals_rituals_aggregate_bool_exp {
  count: goals_rituals_aggregate_bool_exp_count
}

input goals_rituals_aggregate_bool_exp_count {
  arguments: [goals_rituals_select_column!]
  distinct: Boolean
  filter: goals_rituals_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "goals_rituals"
"""
type goals_rituals_aggregate_fields {
  avg: goals_rituals_avg_fields
  count(columns: [goals_rituals_select_column!], distinct: Boolean): Int!
  max: goals_rituals_max_fields
  min: goals_rituals_min_fields
  stddev: goals_rituals_stddev_fields
  stddev_pop: goals_rituals_stddev_pop_fields
  stddev_samp: goals_rituals_stddev_samp_fields
  sum: goals_rituals_sum_fields
  var_pop: goals_rituals_var_pop_fields
  var_samp: goals_rituals_var_samp_fields
  variance: goals_rituals_variance_fields
}

"""
order by aggregate values of table "goals_rituals"
"""
input goals_rituals_aggregate_order_by {
  avg: goals_rituals_avg_order_by
  count: order_by
  max: goals_rituals_max_order_by
  min: goals_rituals_min_order_by
  stddev: goals_rituals_stddev_order_by
  stddev_pop: goals_rituals_stddev_pop_order_by
  stddev_samp: goals_rituals_stddev_samp_order_by
  sum: goals_rituals_sum_order_by
  var_pop: goals_rituals_var_pop_order_by
  var_samp: goals_rituals_var_samp_order_by
  variance: goals_rituals_variance_order_by
}

"""
input type for inserting array relation for remote table "goals_rituals"
"""
input goals_rituals_arr_rel_insert_input {
  data: [goals_rituals_insert_input!]!

  """upsert condition"""
  on_conflict: goals_rituals_on_conflict
}

"""aggregate avg on columns"""
type goals_rituals_avg_fields {
  ritual_interval: Float
  ritual_power: Float
}

"""
order by avg() on columns of table "goals_rituals"
"""
input goals_rituals_avg_order_by {
  ritual_interval: order_by
  ritual_power: order_by
}

"""
Boolean expression to filter rows from the table "goals_rituals". All fields are combined with a logical 'AND'.
"""
input goals_rituals_bool_exp {
  _and: [goals_rituals_bool_exp!]
  _not: goals_rituals_bool_exp
  _or: [goals_rituals_bool_exp!]
  created_at: timestamptz_comparison_exp
  goal: goals_bool_exp
  goal_id: uuid_comparison_exp
  ritual_id: uuid_comparison_exp
  ritual_interval: Int_comparison_exp
  ritual_power: Int_comparison_exp
  ritual_type: String_comparison_exp
  ritual_type_enum: ritual_type_enum_bool_exp
}

"""
unique or primary key constraints on table "goals_rituals"
"""
enum goals_rituals_constraint {
  """
  unique or primary key constraint on columns "ritual_id", "goal_id"
  """
  goals_rituals_pkey
}

"""
input type for incrementing numeric columns in table "goals_rituals"
"""
input goals_rituals_inc_input {
  ritual_interval: Int
  ritual_power: Int
}

"""
input type for inserting data into table "goals_rituals"
"""
input goals_rituals_insert_input {
  created_at: timestamptz
  goal: goals_obj_rel_insert_input
  goal_id: uuid
  ritual_id: uuid
  ritual_interval: Int
  ritual_power: Int
  ritual_type: String
  ritual_type_enum: ritual_type_enum_obj_rel_insert_input
}

"""aggregate max on columns"""
type goals_rituals_max_fields {
  created_at: timestamptz
  goal_id: uuid
  ritual_id: uuid
  ritual_interval: Int
  ritual_power: Int
  ritual_type: String
}

"""
order by max() on columns of table "goals_rituals"
"""
input goals_rituals_max_order_by {
  created_at: order_by
  goal_id: order_by
  ritual_id: order_by
  ritual_interval: order_by
  ritual_power: order_by
  ritual_type: order_by
}

"""aggregate min on columns"""
type goals_rituals_min_fields {
  created_at: timestamptz
  goal_id: uuid
  ritual_id: uuid
  ritual_interval: Int
  ritual_power: Int
  ritual_type: String
}

"""
order by min() on columns of table "goals_rituals"
"""
input goals_rituals_min_order_by {
  created_at: order_by
  goal_id: order_by
  ritual_id: order_by
  ritual_interval: order_by
  ritual_power: order_by
  ritual_type: order_by
}

"""
response of any mutation on the table "goals_rituals"
"""
type goals_rituals_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [goals_rituals!]!
}

"""
input type for inserting object relation for remote table "goals_rituals"
"""
input goals_rituals_obj_rel_insert_input {
  data: goals_rituals_insert_input!

  """upsert condition"""
  on_conflict: goals_rituals_on_conflict
}

"""
on_conflict condition type for table "goals_rituals"
"""
input goals_rituals_on_conflict {
  constraint: goals_rituals_constraint!
  update_columns: [goals_rituals_update_column!]! = []
  where: goals_rituals_bool_exp
}

"""Ordering options when selecting data from "goals_rituals"."""
input goals_rituals_order_by {
  created_at: order_by
  goal: goals_order_by
  goal_id: order_by
  ritual_id: order_by
  ritual_interval: order_by
  ritual_power: order_by
  ritual_type: order_by
  ritual_type_enum: ritual_type_enum_order_by
}

"""primary key columns input for table: goals_rituals"""
input goals_rituals_pk_columns_input {
  goal_id: uuid!
  ritual_id: uuid!
}

"""
select columns of table "goals_rituals"
"""
enum goals_rituals_select_column {
  """column name"""
  created_at

  """column name"""
  goal_id

  """column name"""
  ritual_id

  """column name"""
  ritual_interval

  """column name"""
  ritual_power

  """column name"""
  ritual_type
}

"""
input type for updating data in table "goals_rituals"
"""
input goals_rituals_set_input {
  created_at: timestamptz
  goal_id: uuid
  ritual_id: uuid
  ritual_interval: Int
  ritual_power: Int
  ritual_type: String
}

"""aggregate stddev on columns"""
type goals_rituals_stddev_fields {
  ritual_interval: Float
  ritual_power: Float
}

"""
order by stddev() on columns of table "goals_rituals"
"""
input goals_rituals_stddev_order_by {
  ritual_interval: order_by
  ritual_power: order_by
}

"""aggregate stddev_pop on columns"""
type goals_rituals_stddev_pop_fields {
  ritual_interval: Float
  ritual_power: Float
}

"""
order by stddev_pop() on columns of table "goals_rituals"
"""
input goals_rituals_stddev_pop_order_by {
  ritual_interval: order_by
  ritual_power: order_by
}

"""aggregate stddev_samp on columns"""
type goals_rituals_stddev_samp_fields {
  ritual_interval: Float
  ritual_power: Float
}

"""
order by stddev_samp() on columns of table "goals_rituals"
"""
input goals_rituals_stddev_samp_order_by {
  ritual_interval: order_by
  ritual_power: order_by
}

"""
Streaming cursor of the table "goals_rituals"
"""
input goals_rituals_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: goals_rituals_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input goals_rituals_stream_cursor_value_input {
  created_at: timestamptz
  goal_id: uuid
  ritual_id: uuid
  ritual_interval: Int
  ritual_power: Int
  ritual_type: String
}

"""aggregate sum on columns"""
type goals_rituals_sum_fields {
  ritual_interval: Int
  ritual_power: Int
}

"""
order by sum() on columns of table "goals_rituals"
"""
input goals_rituals_sum_order_by {
  ritual_interval: order_by
  ritual_power: order_by
}

"""
update columns of table "goals_rituals"
"""
enum goals_rituals_update_column {
  """column name"""
  created_at

  """column name"""
  goal_id

  """column name"""
  ritual_id

  """column name"""
  ritual_interval

  """column name"""
  ritual_power

  """column name"""
  ritual_type
}

input goals_rituals_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: goals_rituals_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: goals_rituals_set_input

  """filter the rows which have to be updated"""
  where: goals_rituals_bool_exp!
}

"""aggregate var_pop on columns"""
type goals_rituals_var_pop_fields {
  ritual_interval: Float
  ritual_power: Float
}

"""
order by var_pop() on columns of table "goals_rituals"
"""
input goals_rituals_var_pop_order_by {
  ritual_interval: order_by
  ritual_power: order_by
}

"""aggregate var_samp on columns"""
type goals_rituals_var_samp_fields {
  ritual_interval: Float
  ritual_power: Float
}

"""
order by var_samp() on columns of table "goals_rituals"
"""
input goals_rituals_var_samp_order_by {
  ritual_interval: order_by
  ritual_power: order_by
}

"""aggregate variance on columns"""
type goals_rituals_variance_fields {
  ritual_interval: Float
  ritual_power: Float
}

"""
order by variance() on columns of table "goals_rituals"
"""
input goals_rituals_variance_order_by {
  ritual_interval: order_by
  ritual_power: order_by
}

"""
select columns of table "goals"
"""
enum goals_select_column {
  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  description

  """column name"""
  difficulty

  """column name"""
  finished_at

  """column name"""
  id

  """column name"""
  is_favorite

  """column name"""
  owner_id

  """column name"""
  parent_goal_id

  """column name"""
  privacy

  """column name"""
  slogan

  """column name"""
  status

  """column name"""
  title

  """column name"""
  updated_at
}

"""
select "goals_aggregate_bool_exp_bool_and_arguments_columns" columns of table "goals"
"""
enum goals_select_column_goals_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_favorite
}

"""
select "goals_aggregate_bool_exp_bool_or_arguments_columns" columns of table "goals"
"""
enum goals_select_column_goals_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_favorite
}

"""
input type for updating data in table "goals"
"""
input goals_set_input {
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  difficulty: String
  finished_at: timestamptz
  id: uuid
  is_favorite: Boolean
  owner_id: uuid
  parent_goal_id: uuid
  privacy: String
  slogan: String
  status: String
  title: String
  updated_at: timestamptz
}

"""
columns and relationships of "goals_slides"
"""
type goals_slides {
  active: Boolean!
  created_at: timestamptz!
  deleted_at: timestamptz

  """An object relationship"""
  hero: heroes!
  id: uuid!
  img_path: String
  owner_id: uuid!
  title: String
  updated_at: timestamptz
}

"""
aggregated selection of "goals_slides"
"""
type goals_slides_aggregate {
  aggregate: goals_slides_aggregate_fields
  nodes: [goals_slides!]!
}

input goals_slides_aggregate_bool_exp {
  bool_and: goals_slides_aggregate_bool_exp_bool_and
  bool_or: goals_slides_aggregate_bool_exp_bool_or
  count: goals_slides_aggregate_bool_exp_count
}

input goals_slides_aggregate_bool_exp_bool_and {
  arguments: goals_slides_select_column_goals_slides_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: goals_slides_bool_exp
  predicate: Boolean_comparison_exp!
}

input goals_slides_aggregate_bool_exp_bool_or {
  arguments: goals_slides_select_column_goals_slides_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: goals_slides_bool_exp
  predicate: Boolean_comparison_exp!
}

input goals_slides_aggregate_bool_exp_count {
  arguments: [goals_slides_select_column!]
  distinct: Boolean
  filter: goals_slides_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "goals_slides"
"""
type goals_slides_aggregate_fields {
  count(columns: [goals_slides_select_column!], distinct: Boolean): Int!
  max: goals_slides_max_fields
  min: goals_slides_min_fields
}

"""
order by aggregate values of table "goals_slides"
"""
input goals_slides_aggregate_order_by {
  count: order_by
  max: goals_slides_max_order_by
  min: goals_slides_min_order_by
}

"""
input type for inserting array relation for remote table "goals_slides"
"""
input goals_slides_arr_rel_insert_input {
  data: [goals_slides_insert_input!]!

  """upsert condition"""
  on_conflict: goals_slides_on_conflict
}

"""
Boolean expression to filter rows from the table "goals_slides". All fields are combined with a logical 'AND'.
"""
input goals_slides_bool_exp {
  _and: [goals_slides_bool_exp!]
  _not: goals_slides_bool_exp
  _or: [goals_slides_bool_exp!]
  active: Boolean_comparison_exp
  created_at: timestamptz_comparison_exp
  deleted_at: timestamptz_comparison_exp
  hero: heroes_bool_exp
  id: uuid_comparison_exp
  img_path: String_comparison_exp
  owner_id: uuid_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "goals_slides"
"""
enum goals_slides_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  goals_slides_pkey
}

"""
input type for inserting data into table "goals_slides"
"""
input goals_slides_insert_input {
  active: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  hero: heroes_obj_rel_insert_input
  id: uuid
  img_path: String
  owner_id: uuid
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type goals_slides_max_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  id: uuid
  img_path: String
  owner_id: uuid
  title: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "goals_slides"
"""
input goals_slides_max_order_by {
  created_at: order_by
  deleted_at: order_by
  id: order_by
  img_path: order_by
  owner_id: order_by
  title: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type goals_slides_min_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  id: uuid
  img_path: String
  owner_id: uuid
  title: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "goals_slides"
"""
input goals_slides_min_order_by {
  created_at: order_by
  deleted_at: order_by
  id: order_by
  img_path: order_by
  owner_id: order_by
  title: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "goals_slides"
"""
type goals_slides_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [goals_slides!]!
}

"""
on_conflict condition type for table "goals_slides"
"""
input goals_slides_on_conflict {
  constraint: goals_slides_constraint!
  update_columns: [goals_slides_update_column!]! = []
  where: goals_slides_bool_exp
}

"""Ordering options when selecting data from "goals_slides"."""
input goals_slides_order_by {
  active: order_by
  created_at: order_by
  deleted_at: order_by
  hero: heroes_order_by
  id: order_by
  img_path: order_by
  owner_id: order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: goals_slides"""
input goals_slides_pk_columns_input {
  id: uuid!
}

"""
select columns of table "goals_slides"
"""
enum goals_slides_select_column {
  """column name"""
  active

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  img_path

  """column name"""
  owner_id

  """column name"""
  title

  """column name"""
  updated_at
}

"""
select "goals_slides_aggregate_bool_exp_bool_and_arguments_columns" columns of table "goals_slides"
"""
enum goals_slides_select_column_goals_slides_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  active
}

"""
select "goals_slides_aggregate_bool_exp_bool_or_arguments_columns" columns of table "goals_slides"
"""
enum goals_slides_select_column_goals_slides_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  active
}

"""
input type for updating data in table "goals_slides"
"""
input goals_slides_set_input {
  active: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  id: uuid
  img_path: String
  owner_id: uuid
  title: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "goals_slides"
"""
input goals_slides_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: goals_slides_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input goals_slides_stream_cursor_value_input {
  active: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  id: uuid
  img_path: String
  owner_id: uuid
  title: String
  updated_at: timestamptz
}

"""
update columns of table "goals_slides"
"""
enum goals_slides_update_column {
  """column name"""
  active

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  img_path

  """column name"""
  owner_id

  """column name"""
  title

  """column name"""
  updated_at
}

input goals_slides_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: goals_slides_set_input

  """filter the rows which have to be updated"""
  where: goals_slides_bool_exp!
}

"""
Streaming cursor of the table "goals"
"""
input goals_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: goals_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input goals_stream_cursor_value_input {
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  difficulty: String
  finished_at: timestamptz
  id: uuid
  is_favorite: Boolean
  owner_id: uuid
  parent_goal_id: uuid
  privacy: String
  slogan: String
  status: String
  title: String
  updated_at: timestamptz
}

"""
update columns of table "goals"
"""
enum goals_update_column {
  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  description

  """column name"""
  difficulty

  """column name"""
  finished_at

  """column name"""
  id

  """column name"""
  is_favorite

  """column name"""
  owner_id

  """column name"""
  parent_goal_id

  """column name"""
  privacy

  """column name"""
  slogan

  """column name"""
  status

  """column name"""
  title

  """column name"""
  updated_at
}

input goals_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: goals_set_input

  """filter the rows which have to be updated"""
  where: goals_bool_exp!
}

"""list of heroes"""
type heroes {
  """An array relationship"""
  achievements(
    """distinct select on columns"""
    distinct_on: [achievements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [achievements_order_by!]

    """filter the rows returned"""
    where: achievements_bool_exp
  ): [achievements!]!

  """An aggregate relationship"""
  achievements_aggregate(
    """distinct select on columns"""
    distinct_on: [achievements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [achievements_order_by!]

    """filter the rows returned"""
    where: achievements_bool_exp
  ): achievements_aggregate!

  """An array relationship"""
  addons(
    """distinct select on columns"""
    distinct_on: [addons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addons_order_by!]

    """filter the rows returned"""
    where: addons_bool_exp
  ): [addons!]!

  """An aggregate relationship"""
  addons_aggregate(
    """distinct select on columns"""
    distinct_on: [addons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addons_order_by!]

    """filter the rows returned"""
    where: addons_bool_exp
  ): addons_aggregate!
  avatar: String
  birthday: timestamptz
  coins: Int!
  created_at: timestamptz!
  deleted_at: timestamptz
  email: String!

  """An array relationship"""
  goals(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): [goals!]!

  """An aggregate relationship"""
  goals_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): goals_aggregate!

  """An array relationship"""
  goals_slides(
    """distinct select on columns"""
    distinct_on: [goals_slides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_slides_order_by!]

    """filter the rows returned"""
    where: goals_slides_bool_exp
  ): [goals_slides!]!

  """An aggregate relationship"""
  goals_slides_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_slides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_slides_order_by!]

    """filter the rows returned"""
    where: goals_slides_bool_exp
  ): goals_slides_aggregate!

  """An object relationship"""
  heroes_role: heroes_roles
  id: uuid!
  name: String!

  """An object relationship"""
  notepad: notepad

  """An array relationship"""
  notes(
    """distinct select on columns"""
    distinct_on: [notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notes_order_by!]

    """filter the rows returned"""
    where: notes_bool_exp
  ): [notes!]!

  """An aggregate relationship"""
  notes_aggregate(
    """distinct select on columns"""
    distinct_on: [notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notes_order_by!]

    """filter the rows returned"""
    where: notes_bool_exp
  ): notes_aggregate!
  password: String
  phone: String
  role: heroes_roles_enum

  """An array relationship"""
  sprints(
    """distinct select on columns"""
    distinct_on: [sprints_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sprints_order_by!]

    """filter the rows returned"""
    where: sprints_bool_exp
  ): [sprints!]!

  """An aggregate relationship"""
  sprints_aggregate(
    """distinct select on columns"""
    distinct_on: [sprints_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sprints_order_by!]

    """filter the rows returned"""
    where: sprints_bool_exp
  ): sprints_aggregate!

  """An array relationship"""
  tokens(
    """distinct select on columns"""
    distinct_on: [heroes_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_tokens_order_by!]

    """filter the rows returned"""
    where: heroes_tokens_bool_exp
  ): [heroes_tokens!]!

  """An aggregate relationship"""
  tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [heroes_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_tokens_order_by!]

    """filter the rows returned"""
    where: heroes_tokens_bool_exp
  ): heroes_tokens_aggregate!
  updated_at: timestamptz!
}

"""
aggregated selection of "heroes"
"""
type heroes_aggregate {
  aggregate: heroes_aggregate_fields
  nodes: [heroes!]!
}

input heroes_aggregate_bool_exp {
  count: heroes_aggregate_bool_exp_count
}

input heroes_aggregate_bool_exp_count {
  arguments: [heroes_select_column!]
  distinct: Boolean
  filter: heroes_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "heroes"
"""
type heroes_aggregate_fields {
  avg: heroes_avg_fields
  count(columns: [heroes_select_column!], distinct: Boolean): Int!
  max: heroes_max_fields
  min: heroes_min_fields
  stddev: heroes_stddev_fields
  stddev_pop: heroes_stddev_pop_fields
  stddev_samp: heroes_stddev_samp_fields
  sum: heroes_sum_fields
  var_pop: heroes_var_pop_fields
  var_samp: heroes_var_samp_fields
  variance: heroes_variance_fields
}

"""
order by aggregate values of table "heroes"
"""
input heroes_aggregate_order_by {
  avg: heroes_avg_order_by
  count: order_by
  max: heroes_max_order_by
  min: heroes_min_order_by
  stddev: heroes_stddev_order_by
  stddev_pop: heroes_stddev_pop_order_by
  stddev_samp: heroes_stddev_samp_order_by
  sum: heroes_sum_order_by
  var_pop: heroes_var_pop_order_by
  var_samp: heroes_var_samp_order_by
  variance: heroes_variance_order_by
}

"""
input type for inserting array relation for remote table "heroes"
"""
input heroes_arr_rel_insert_input {
  data: [heroes_insert_input!]!

  """upsert condition"""
  on_conflict: heroes_on_conflict
}

"""aggregate avg on columns"""
type heroes_avg_fields {
  coins: Float
}

"""
order by avg() on columns of table "heroes"
"""
input heroes_avg_order_by {
  coins: order_by
}

"""
Boolean expression to filter rows from the table "heroes". All fields are combined with a logical 'AND'.
"""
input heroes_bool_exp {
  _and: [heroes_bool_exp!]
  _not: heroes_bool_exp
  _or: [heroes_bool_exp!]
  achievements: achievements_bool_exp
  achievements_aggregate: achievements_aggregate_bool_exp
  addons: addons_bool_exp
  addons_aggregate: addons_aggregate_bool_exp
  avatar: String_comparison_exp
  birthday: timestamptz_comparison_exp
  coins: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  deleted_at: timestamptz_comparison_exp
  email: String_comparison_exp
  goals: goals_bool_exp
  goals_aggregate: goals_aggregate_bool_exp
  goals_slides: goals_slides_bool_exp
  goals_slides_aggregate: goals_slides_aggregate_bool_exp
  heroes_role: heroes_roles_bool_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  notepad: notepad_bool_exp
  notes: notes_bool_exp
  notes_aggregate: notes_aggregate_bool_exp
  password: String_comparison_exp
  phone: String_comparison_exp
  role: heroes_roles_enum_comparison_exp
  sprints: sprints_bool_exp
  sprints_aggregate: sprints_aggregate_bool_exp
  tokens: heroes_tokens_bool_exp
  tokens_aggregate: heroes_tokens_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "heroes"
"""
enum heroes_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  heroes_pkey
}

"""
input type for incrementing numeric columns in table "heroes"
"""
input heroes_inc_input {
  coins: Int
}

"""
input type for inserting data into table "heroes"
"""
input heroes_insert_input {
  achievements: achievements_arr_rel_insert_input
  addons: addons_arr_rel_insert_input
  avatar: String
  birthday: timestamptz
  coins: Int
  created_at: timestamptz
  deleted_at: timestamptz
  email: String
  goals: goals_arr_rel_insert_input
  goals_slides: goals_slides_arr_rel_insert_input
  heroes_role: heroes_roles_obj_rel_insert_input
  id: uuid
  name: String
  notepad: notepad_obj_rel_insert_input
  notes: notes_arr_rel_insert_input
  password: String
  phone: String
  role: heroes_roles_enum
  sprints: sprints_arr_rel_insert_input
  tokens: heroes_tokens_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type heroes_max_fields {
  avatar: String
  birthday: timestamptz
  coins: Int
  created_at: timestamptz
  deleted_at: timestamptz
  email: String
  id: uuid
  name: String
  password: String
  phone: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "heroes"
"""
input heroes_max_order_by {
  avatar: order_by
  birthday: order_by
  coins: order_by
  created_at: order_by
  deleted_at: order_by
  email: order_by
  id: order_by
  name: order_by
  password: order_by
  phone: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type heroes_min_fields {
  avatar: String
  birthday: timestamptz
  coins: Int
  created_at: timestamptz
  deleted_at: timestamptz
  email: String
  id: uuid
  name: String
  password: String
  phone: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "heroes"
"""
input heroes_min_order_by {
  avatar: order_by
  birthday: order_by
  coins: order_by
  created_at: order_by
  deleted_at: order_by
  email: order_by
  id: order_by
  name: order_by
  password: order_by
  phone: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "heroes"
"""
type heroes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [heroes!]!
}

"""
input type for inserting object relation for remote table "heroes"
"""
input heroes_obj_rel_insert_input {
  data: heroes_insert_input!

  """upsert condition"""
  on_conflict: heroes_on_conflict
}

"""
on_conflict condition type for table "heroes"
"""
input heroes_on_conflict {
  constraint: heroes_constraint!
  update_columns: [heroes_update_column!]! = []
  where: heroes_bool_exp
}

"""Ordering options when selecting data from "heroes"."""
input heroes_order_by {
  achievements_aggregate: achievements_aggregate_order_by
  addons_aggregate: addons_aggregate_order_by
  avatar: order_by
  birthday: order_by
  coins: order_by
  created_at: order_by
  deleted_at: order_by
  email: order_by
  goals_aggregate: goals_aggregate_order_by
  goals_slides_aggregate: goals_slides_aggregate_order_by
  heroes_role: heroes_roles_order_by
  id: order_by
  name: order_by
  notepad: notepad_order_by
  notes_aggregate: notes_aggregate_order_by
  password: order_by
  phone: order_by
  role: order_by
  sprints_aggregate: sprints_aggregate_order_by
  tokens_aggregate: heroes_tokens_aggregate_order_by
  updated_at: order_by
}

"""primary key columns input for table: heroes"""
input heroes_pk_columns_input {
  id: uuid!
}

"""
columns and relationships of "heroes_roles"
"""
type heroes_roles {
  description: String

  """An array relationship"""
  heroes(
    """distinct select on columns"""
    distinct_on: [heroes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_order_by!]

    """filter the rows returned"""
    where: heroes_bool_exp
  ): [heroes!]!

  """An aggregate relationship"""
  heroes_aggregate(
    """distinct select on columns"""
    distinct_on: [heroes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_order_by!]

    """filter the rows returned"""
    where: heroes_bool_exp
  ): heroes_aggregate!
  role: String!
}

"""
aggregated selection of "heroes_roles"
"""
type heroes_roles_aggregate {
  aggregate: heroes_roles_aggregate_fields
  nodes: [heroes_roles!]!
}

"""
aggregate fields of "heroes_roles"
"""
type heroes_roles_aggregate_fields {
  count(columns: [heroes_roles_select_column!], distinct: Boolean): Int!
  max: heroes_roles_max_fields
  min: heroes_roles_min_fields
}

"""
Boolean expression to filter rows from the table "heroes_roles". All fields are combined with a logical 'AND'.
"""
input heroes_roles_bool_exp {
  _and: [heroes_roles_bool_exp!]
  _not: heroes_roles_bool_exp
  _or: [heroes_roles_bool_exp!]
  description: String_comparison_exp
  heroes: heroes_bool_exp
  heroes_aggregate: heroes_aggregate_bool_exp
  role: String_comparison_exp
}

"""
unique or primary key constraints on table "heroes_roles"
"""
enum heroes_roles_constraint {
  """
  unique or primary key constraint on columns "role"
  """
  heroes_roles_pkey
}

enum heroes_roles_enum {
  """admin"""
  admin

  """not activated user"""
  guest
  hero

  """admin"""
  super_hero
}

"""
Boolean expression to compare columns of type "heroes_roles_enum". All fields are combined with logical 'AND'.
"""
input heroes_roles_enum_comparison_exp {
  _eq: heroes_roles_enum
  _in: [heroes_roles_enum!]
  _is_null: Boolean
  _neq: heroes_roles_enum
  _nin: [heroes_roles_enum!]
}

"""
input type for inserting data into table "heroes_roles"
"""
input heroes_roles_insert_input {
  description: String
  heroes: heroes_arr_rel_insert_input
  role: String
}

"""aggregate max on columns"""
type heroes_roles_max_fields {
  description: String
  role: String
}

"""aggregate min on columns"""
type heroes_roles_min_fields {
  description: String
  role: String
}

"""
response of any mutation on the table "heroes_roles"
"""
type heroes_roles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [heroes_roles!]!
}

"""
input type for inserting object relation for remote table "heroes_roles"
"""
input heroes_roles_obj_rel_insert_input {
  data: heroes_roles_insert_input!

  """upsert condition"""
  on_conflict: heroes_roles_on_conflict
}

"""
on_conflict condition type for table "heroes_roles"
"""
input heroes_roles_on_conflict {
  constraint: heroes_roles_constraint!
  update_columns: [heroes_roles_update_column!]! = []
  where: heroes_roles_bool_exp
}

"""Ordering options when selecting data from "heroes_roles"."""
input heroes_roles_order_by {
  description: order_by
  heroes_aggregate: heroes_aggregate_order_by
  role: order_by
}

"""primary key columns input for table: heroes_roles"""
input heroes_roles_pk_columns_input {
  role: String!
}

"""
select columns of table "heroes_roles"
"""
enum heroes_roles_select_column {
  """column name"""
  description

  """column name"""
  role
}

"""
input type for updating data in table "heroes_roles"
"""
input heroes_roles_set_input {
  description: String
  role: String
}

"""
Streaming cursor of the table "heroes_roles"
"""
input heroes_roles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: heroes_roles_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input heroes_roles_stream_cursor_value_input {
  description: String
  role: String
}

"""
update columns of table "heroes_roles"
"""
enum heroes_roles_update_column {
  """column name"""
  description

  """column name"""
  role
}

input heroes_roles_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: heroes_roles_set_input

  """filter the rows which have to be updated"""
  where: heroes_roles_bool_exp!
}

"""
select columns of table "heroes"
"""
enum heroes_select_column {
  """column name"""
  avatar

  """column name"""
  birthday

  """column name"""
  coins

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  name

  """column name"""
  password

  """column name"""
  phone

  """column name"""
  role

  """column name"""
  updated_at
}

"""
input type for updating data in table "heroes"
"""
input heroes_set_input {
  avatar: String
  birthday: timestamptz
  coins: Int
  created_at: timestamptz
  deleted_at: timestamptz
  email: String
  id: uuid
  name: String
  password: String
  phone: String
  role: heroes_roles_enum
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type heroes_stddev_fields {
  coins: Float
}

"""
order by stddev() on columns of table "heroes"
"""
input heroes_stddev_order_by {
  coins: order_by
}

"""aggregate stddev_pop on columns"""
type heroes_stddev_pop_fields {
  coins: Float
}

"""
order by stddev_pop() on columns of table "heroes"
"""
input heroes_stddev_pop_order_by {
  coins: order_by
}

"""aggregate stddev_samp on columns"""
type heroes_stddev_samp_fields {
  coins: Float
}

"""
order by stddev_samp() on columns of table "heroes"
"""
input heroes_stddev_samp_order_by {
  coins: order_by
}

"""
Streaming cursor of the table "heroes"
"""
input heroes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: heroes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input heroes_stream_cursor_value_input {
  avatar: String
  birthday: timestamptz
  coins: Int
  created_at: timestamptz
  deleted_at: timestamptz
  email: String
  id: uuid
  name: String
  password: String
  phone: String
  role: heroes_roles_enum
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type heroes_sum_fields {
  coins: Int
}

"""
order by sum() on columns of table "heroes"
"""
input heroes_sum_order_by {
  coins: order_by
}

"""refresh tokens"""
type heroes_tokens {
  """An object relationship"""
  hero: heroes!
  hero_id: uuid!
  session_id: uuid!
  token: String
}

"""
aggregated selection of "heroes_tokens"
"""
type heroes_tokens_aggregate {
  aggregate: heroes_tokens_aggregate_fields
  nodes: [heroes_tokens!]!
}

input heroes_tokens_aggregate_bool_exp {
  count: heroes_tokens_aggregate_bool_exp_count
}

input heroes_tokens_aggregate_bool_exp_count {
  arguments: [heroes_tokens_select_column!]
  distinct: Boolean
  filter: heroes_tokens_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "heroes_tokens"
"""
type heroes_tokens_aggregate_fields {
  count(columns: [heroes_tokens_select_column!], distinct: Boolean): Int!
  max: heroes_tokens_max_fields
  min: heroes_tokens_min_fields
}

"""
order by aggregate values of table "heroes_tokens"
"""
input heroes_tokens_aggregate_order_by {
  count: order_by
  max: heroes_tokens_max_order_by
  min: heroes_tokens_min_order_by
}

"""
input type for inserting array relation for remote table "heroes_tokens"
"""
input heroes_tokens_arr_rel_insert_input {
  data: [heroes_tokens_insert_input!]!

  """upsert condition"""
  on_conflict: heroes_tokens_on_conflict
}

"""
Boolean expression to filter rows from the table "heroes_tokens". All fields are combined with a logical 'AND'.
"""
input heroes_tokens_bool_exp {
  _and: [heroes_tokens_bool_exp!]
  _not: heroes_tokens_bool_exp
  _or: [heroes_tokens_bool_exp!]
  hero: heroes_bool_exp
  hero_id: uuid_comparison_exp
  session_id: uuid_comparison_exp
  token: String_comparison_exp
}

"""
unique or primary key constraints on table "heroes_tokens"
"""
enum heroes_tokens_constraint {
  """
  unique or primary key constraint on columns "session_id"
  """
  heroes_tokens_pkey

  """
  unique or primary key constraint on columns "session_id"
  """
  heroes_tokens_session_id_key
}

"""
input type for inserting data into table "heroes_tokens"
"""
input heroes_tokens_insert_input {
  hero: heroes_obj_rel_insert_input
  hero_id: uuid
  session_id: uuid
  token: String
}

"""aggregate max on columns"""
type heroes_tokens_max_fields {
  hero_id: uuid
  session_id: uuid
  token: String
}

"""
order by max() on columns of table "heroes_tokens"
"""
input heroes_tokens_max_order_by {
  hero_id: order_by
  session_id: order_by
  token: order_by
}

"""aggregate min on columns"""
type heroes_tokens_min_fields {
  hero_id: uuid
  session_id: uuid
  token: String
}

"""
order by min() on columns of table "heroes_tokens"
"""
input heroes_tokens_min_order_by {
  hero_id: order_by
  session_id: order_by
  token: order_by
}

"""
response of any mutation on the table "heroes_tokens"
"""
type heroes_tokens_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [heroes_tokens!]!
}

"""
on_conflict condition type for table "heroes_tokens"
"""
input heroes_tokens_on_conflict {
  constraint: heroes_tokens_constraint!
  update_columns: [heroes_tokens_update_column!]! = []
  where: heroes_tokens_bool_exp
}

"""Ordering options when selecting data from "heroes_tokens"."""
input heroes_tokens_order_by {
  hero: heroes_order_by
  hero_id: order_by
  session_id: order_by
  token: order_by
}

"""primary key columns input for table: heroes_tokens"""
input heroes_tokens_pk_columns_input {
  session_id: uuid!
}

"""
select columns of table "heroes_tokens"
"""
enum heroes_tokens_select_column {
  """column name"""
  hero_id

  """column name"""
  session_id

  """column name"""
  token
}

"""
input type for updating data in table "heroes_tokens"
"""
input heroes_tokens_set_input {
  hero_id: uuid
  session_id: uuid
  token: String
}

"""
Streaming cursor of the table "heroes_tokens"
"""
input heroes_tokens_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: heroes_tokens_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input heroes_tokens_stream_cursor_value_input {
  hero_id: uuid
  session_id: uuid
  token: String
}

"""
update columns of table "heroes_tokens"
"""
enum heroes_tokens_update_column {
  """column name"""
  hero_id

  """column name"""
  session_id

  """column name"""
  token
}

input heroes_tokens_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: heroes_tokens_set_input

  """filter the rows which have to be updated"""
  where: heroes_tokens_bool_exp!
}

"""
update columns of table "heroes"
"""
enum heroes_update_column {
  """column name"""
  avatar

  """column name"""
  birthday

  """column name"""
  coins

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  name

  """column name"""
  password

  """column name"""
  phone

  """column name"""
  role

  """column name"""
  updated_at
}

input heroes_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: heroes_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: heroes_set_input

  """filter the rows which have to be updated"""
  where: heroes_bool_exp!
}

"""aggregate var_pop on columns"""
type heroes_var_pop_fields {
  coins: Float
}

"""
order by var_pop() on columns of table "heroes"
"""
input heroes_var_pop_order_by {
  coins: order_by
}

"""aggregate var_samp on columns"""
type heroes_var_samp_fields {
  coins: Float
}

"""
order by var_samp() on columns of table "heroes"
"""
input heroes_var_samp_order_by {
  coins: order_by
}

"""aggregate variance on columns"""
type heroes_variance_fields {
  coins: Float
}

"""
order by variance() on columns of table "heroes"
"""
input heroes_variance_order_by {
  coins: order_by
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "achievements"
  """
  delete_achievements(
    """filter the rows which have to be deleted"""
    where: achievements_bool_exp!
  ): achievements_mutation_response

  """
  delete single row from the table: "achievements"
  """
  delete_achievements_by_pk(id: uuid!): achievements

  """
  delete data from the table: "addons"
  """
  delete_addons(
    """filter the rows which have to be deleted"""
    where: addons_bool_exp!
  ): addons_mutation_response

  """
  delete single row from the table: "addons"
  """
  delete_addons_by_pk(addon: String!, owner_id: uuid!): addons

  """
  delete data from the table: "addons_enum"
  """
  delete_addons_enum(
    """filter the rows which have to be deleted"""
    where: addons_enum_bool_exp!
  ): addons_enum_mutation_response

  """
  delete single row from the table: "addons_enum"
  """
  delete_addons_enum_by_pk(addon: String!): addons_enum

  """
  delete data from the table: "goal_difficulty_enum"
  """
  delete_goal_difficulty_enum(
    """filter the rows which have to be deleted"""
    where: goal_difficulty_enum_bool_exp!
  ): goal_difficulty_enum_mutation_response

  """
  delete single row from the table: "goal_difficulty_enum"
  """
  delete_goal_difficulty_enum_by_pk(difficulty: String!): goal_difficulty_enum

  """
  delete data from the table: "goal_status_enum"
  """
  delete_goal_status_enum(
    """filter the rows which have to be deleted"""
    where: goal_status_enum_bool_exp!
  ): goal_status_enum_mutation_response

  """
  delete single row from the table: "goal_status_enum"
  """
  delete_goal_status_enum_by_pk(status: String!): goal_status_enum

  """
  delete data from the table: "goals"
  """
  delete_goals(
    """filter the rows which have to be deleted"""
    where: goals_bool_exp!
  ): goals_mutation_response

  """
  delete single row from the table: "goals"
  """
  delete_goals_by_pk(id: uuid!): goals

  """
  delete data from the table: "goals_rituals"
  """
  delete_goals_rituals(
    """filter the rows which have to be deleted"""
    where: goals_rituals_bool_exp!
  ): goals_rituals_mutation_response

  """
  delete single row from the table: "goals_rituals"
  """
  delete_goals_rituals_by_pk(goal_id: uuid!, ritual_id: uuid!): goals_rituals

  """
  delete data from the table: "goals_slides"
  """
  delete_goals_slides(
    """filter the rows which have to be deleted"""
    where: goals_slides_bool_exp!
  ): goals_slides_mutation_response

  """
  delete single row from the table: "goals_slides"
  """
  delete_goals_slides_by_pk(id: uuid!): goals_slides

  """
  delete data from the table: "heroes"
  """
  delete_heroes(
    """filter the rows which have to be deleted"""
    where: heroes_bool_exp!
  ): heroes_mutation_response

  """
  delete single row from the table: "heroes"
  """
  delete_heroes_by_pk(id: uuid!): heroes

  """
  delete data from the table: "heroes_roles"
  """
  delete_heroes_roles(
    """filter the rows which have to be deleted"""
    where: heroes_roles_bool_exp!
  ): heroes_roles_mutation_response

  """
  delete single row from the table: "heroes_roles"
  """
  delete_heroes_roles_by_pk(role: String!): heroes_roles

  """
  delete data from the table: "heroes_tokens"
  """
  delete_heroes_tokens(
    """filter the rows which have to be deleted"""
    where: heroes_tokens_bool_exp!
  ): heroes_tokens_mutation_response

  """
  delete single row from the table: "heroes_tokens"
  """
  delete_heroes_tokens_by_pk(session_id: uuid!): heroes_tokens

  """
  delete data from the table: "notepad"
  """
  delete_notepad(
    """filter the rows which have to be deleted"""
    where: notepad_bool_exp!
  ): notepad_mutation_response

  """
  delete single row from the table: "notepad"
  """
  delete_notepad_by_pk(owner_id: uuid!): notepad

  """
  delete data from the table: "notes"
  """
  delete_notes(
    """filter the rows which have to be deleted"""
    where: notes_bool_exp!
  ): notes_mutation_response

  """
  delete single row from the table: "notes"
  """
  delete_notes_by_pk(id: uuid!): notes

  """
  delete data from the table: "notes_labels"
  """
  delete_notes_labels(
    """filter the rows which have to be deleted"""
    where: notes_labels_bool_exp!
  ): notes_labels_mutation_response

  """
  delete single row from the table: "notes_labels"
  """
  delete_notes_labels_by_pk(id: uuid!): notes_labels

  """
  delete data from the table: "privacy_enum"
  """
  delete_privacy_enum(
    """filter the rows which have to be deleted"""
    where: privacy_enum_bool_exp!
  ): privacy_enum_mutation_response

  """
  delete single row from the table: "privacy_enum"
  """
  delete_privacy_enum_by_pk(privacy: String!): privacy_enum

  """
  delete data from the table: "restore_codes"
  """
  delete_restore_codes(
    """filter the rows which have to be deleted"""
    where: restore_codes_bool_exp!
  ): restore_codes_mutation_response

  """
  delete single row from the table: "restore_codes"
  """
  delete_restore_codes_by_pk(id: uuid!): restore_codes

  """
  delete data from the table: "restore_codes_enum"
  """
  delete_restore_codes_enum(
    """filter the rows which have to be deleted"""
    where: restore_codes_enum_bool_exp!
  ): restore_codes_enum_mutation_response

  """
  delete single row from the table: "restore_codes_enum"
  """
  delete_restore_codes_enum_by_pk(type: String!): restore_codes_enum

  """
  delete data from the table: "ritual_type_enum"
  """
  delete_ritual_type_enum(
    """filter the rows which have to be deleted"""
    where: ritual_type_enum_bool_exp!
  ): ritual_type_enum_mutation_response

  """
  delete single row from the table: "ritual_type_enum"
  """
  delete_ritual_type_enum_by_pk(ritual_type: String!): ritual_type_enum

  """
  delete data from the table: "sprints"
  """
  delete_sprints(
    """filter the rows which have to be deleted"""
    where: sprints_bool_exp!
  ): sprints_mutation_response

  """
  delete single row from the table: "sprints"
  """
  delete_sprints_by_pk(id: uuid!): sprints

  """
  delete data from the table: "stories"
  """
  delete_stories(
    """filter the rows which have to be deleted"""
    where: stories_bool_exp!
  ): stories_mutation_response

  """
  delete single row from the table: "stories"
  """
  delete_stories_by_pk(id: uuid!): stories

  """
  delete data from the table: "stories_messages"
  """
  delete_stories_messages(
    """filter the rows which have to be deleted"""
    where: stories_messages_bool_exp!
  ): stories_messages_mutation_response

  """
  delete single row from the table: "stories_messages"
  """
  delete_stories_messages_by_pk(id: uuid!): stories_messages

  """
  delete data from the table: "stories_users"
  """
  delete_stories_users(
    """filter the rows which have to be deleted"""
    where: stories_users_bool_exp!
  ): stories_users_mutation_response

  """
  delete single row from the table: "stories_users"
  """
  delete_stories_users_by_pk(story_id: uuid!, user_id: uuid!): stories_users

  """
  insert data into the table: "achievements"
  """
  insert_achievements(
    """the rows to be inserted"""
    objects: [achievements_insert_input!]!

    """upsert condition"""
    on_conflict: achievements_on_conflict
  ): achievements_mutation_response

  """
  insert a single row into the table: "achievements"
  """
  insert_achievements_one(
    """the row to be inserted"""
    object: achievements_insert_input!

    """upsert condition"""
    on_conflict: achievements_on_conflict
  ): achievements

  """
  insert data into the table: "addons"
  """
  insert_addons(
    """the rows to be inserted"""
    objects: [addons_insert_input!]!

    """upsert condition"""
    on_conflict: addons_on_conflict
  ): addons_mutation_response

  """
  insert data into the table: "addons_enum"
  """
  insert_addons_enum(
    """the rows to be inserted"""
    objects: [addons_enum_insert_input!]!

    """upsert condition"""
    on_conflict: addons_enum_on_conflict
  ): addons_enum_mutation_response

  """
  insert a single row into the table: "addons_enum"
  """
  insert_addons_enum_one(
    """the row to be inserted"""
    object: addons_enum_insert_input!

    """upsert condition"""
    on_conflict: addons_enum_on_conflict
  ): addons_enum

  """
  insert a single row into the table: "addons"
  """
  insert_addons_one(
    """the row to be inserted"""
    object: addons_insert_input!

    """upsert condition"""
    on_conflict: addons_on_conflict
  ): addons

  """
  insert data into the table: "goal_difficulty_enum"
  """
  insert_goal_difficulty_enum(
    """the rows to be inserted"""
    objects: [goal_difficulty_enum_insert_input!]!

    """upsert condition"""
    on_conflict: goal_difficulty_enum_on_conflict
  ): goal_difficulty_enum_mutation_response

  """
  insert a single row into the table: "goal_difficulty_enum"
  """
  insert_goal_difficulty_enum_one(
    """the row to be inserted"""
    object: goal_difficulty_enum_insert_input!

    """upsert condition"""
    on_conflict: goal_difficulty_enum_on_conflict
  ): goal_difficulty_enum

  """
  insert data into the table: "goal_status_enum"
  """
  insert_goal_status_enum(
    """the rows to be inserted"""
    objects: [goal_status_enum_insert_input!]!

    """upsert condition"""
    on_conflict: goal_status_enum_on_conflict
  ): goal_status_enum_mutation_response

  """
  insert a single row into the table: "goal_status_enum"
  """
  insert_goal_status_enum_one(
    """the row to be inserted"""
    object: goal_status_enum_insert_input!

    """upsert condition"""
    on_conflict: goal_status_enum_on_conflict
  ): goal_status_enum

  """
  insert data into the table: "goals"
  """
  insert_goals(
    """the rows to be inserted"""
    objects: [goals_insert_input!]!

    """upsert condition"""
    on_conflict: goals_on_conflict
  ): goals_mutation_response

  """
  insert a single row into the table: "goals"
  """
  insert_goals_one(
    """the row to be inserted"""
    object: goals_insert_input!

    """upsert condition"""
    on_conflict: goals_on_conflict
  ): goals

  """
  insert data into the table: "goals_rituals"
  """
  insert_goals_rituals(
    """the rows to be inserted"""
    objects: [goals_rituals_insert_input!]!

    """upsert condition"""
    on_conflict: goals_rituals_on_conflict
  ): goals_rituals_mutation_response

  """
  insert a single row into the table: "goals_rituals"
  """
  insert_goals_rituals_one(
    """the row to be inserted"""
    object: goals_rituals_insert_input!

    """upsert condition"""
    on_conflict: goals_rituals_on_conflict
  ): goals_rituals

  """
  insert data into the table: "goals_slides"
  """
  insert_goals_slides(
    """the rows to be inserted"""
    objects: [goals_slides_insert_input!]!

    """upsert condition"""
    on_conflict: goals_slides_on_conflict
  ): goals_slides_mutation_response

  """
  insert a single row into the table: "goals_slides"
  """
  insert_goals_slides_one(
    """the row to be inserted"""
    object: goals_slides_insert_input!

    """upsert condition"""
    on_conflict: goals_slides_on_conflict
  ): goals_slides

  """
  insert data into the table: "heroes"
  """
  insert_heroes(
    """the rows to be inserted"""
    objects: [heroes_insert_input!]!

    """upsert condition"""
    on_conflict: heroes_on_conflict
  ): heroes_mutation_response

  """
  insert a single row into the table: "heroes"
  """
  insert_heroes_one(
    """the row to be inserted"""
    object: heroes_insert_input!

    """upsert condition"""
    on_conflict: heroes_on_conflict
  ): heroes

  """
  insert data into the table: "heroes_roles"
  """
  insert_heroes_roles(
    """the rows to be inserted"""
    objects: [heroes_roles_insert_input!]!

    """upsert condition"""
    on_conflict: heroes_roles_on_conflict
  ): heroes_roles_mutation_response

  """
  insert a single row into the table: "heroes_roles"
  """
  insert_heroes_roles_one(
    """the row to be inserted"""
    object: heroes_roles_insert_input!

    """upsert condition"""
    on_conflict: heroes_roles_on_conflict
  ): heroes_roles

  """
  insert data into the table: "heroes_tokens"
  """
  insert_heroes_tokens(
    """the rows to be inserted"""
    objects: [heroes_tokens_insert_input!]!

    """upsert condition"""
    on_conflict: heroes_tokens_on_conflict
  ): heroes_tokens_mutation_response

  """
  insert a single row into the table: "heroes_tokens"
  """
  insert_heroes_tokens_one(
    """the row to be inserted"""
    object: heroes_tokens_insert_input!

    """upsert condition"""
    on_conflict: heroes_tokens_on_conflict
  ): heroes_tokens

  """
  insert data into the table: "notepad"
  """
  insert_notepad(
    """the rows to be inserted"""
    objects: [notepad_insert_input!]!

    """upsert condition"""
    on_conflict: notepad_on_conflict
  ): notepad_mutation_response

  """
  insert a single row into the table: "notepad"
  """
  insert_notepad_one(
    """the row to be inserted"""
    object: notepad_insert_input!

    """upsert condition"""
    on_conflict: notepad_on_conflict
  ): notepad

  """
  insert data into the table: "notes"
  """
  insert_notes(
    """the rows to be inserted"""
    objects: [notes_insert_input!]!

    """upsert condition"""
    on_conflict: notes_on_conflict
  ): notes_mutation_response

  """
  insert data into the table: "notes_labels"
  """
  insert_notes_labels(
    """the rows to be inserted"""
    objects: [notes_labels_insert_input!]!

    """upsert condition"""
    on_conflict: notes_labels_on_conflict
  ): notes_labels_mutation_response

  """
  insert a single row into the table: "notes_labels"
  """
  insert_notes_labels_one(
    """the row to be inserted"""
    object: notes_labels_insert_input!

    """upsert condition"""
    on_conflict: notes_labels_on_conflict
  ): notes_labels

  """
  insert a single row into the table: "notes"
  """
  insert_notes_one(
    """the row to be inserted"""
    object: notes_insert_input!

    """upsert condition"""
    on_conflict: notes_on_conflict
  ): notes

  """
  insert data into the table: "privacy_enum"
  """
  insert_privacy_enum(
    """the rows to be inserted"""
    objects: [privacy_enum_insert_input!]!

    """upsert condition"""
    on_conflict: privacy_enum_on_conflict
  ): privacy_enum_mutation_response

  """
  insert a single row into the table: "privacy_enum"
  """
  insert_privacy_enum_one(
    """the row to be inserted"""
    object: privacy_enum_insert_input!

    """upsert condition"""
    on_conflict: privacy_enum_on_conflict
  ): privacy_enum

  """
  insert data into the table: "restore_codes"
  """
  insert_restore_codes(
    """the rows to be inserted"""
    objects: [restore_codes_insert_input!]!

    """upsert condition"""
    on_conflict: restore_codes_on_conflict
  ): restore_codes_mutation_response

  """
  insert data into the table: "restore_codes_enum"
  """
  insert_restore_codes_enum(
    """the rows to be inserted"""
    objects: [restore_codes_enum_insert_input!]!

    """upsert condition"""
    on_conflict: restore_codes_enum_on_conflict
  ): restore_codes_enum_mutation_response

  """
  insert a single row into the table: "restore_codes_enum"
  """
  insert_restore_codes_enum_one(
    """the row to be inserted"""
    object: restore_codes_enum_insert_input!

    """upsert condition"""
    on_conflict: restore_codes_enum_on_conflict
  ): restore_codes_enum

  """
  insert a single row into the table: "restore_codes"
  """
  insert_restore_codes_one(
    """the row to be inserted"""
    object: restore_codes_insert_input!

    """upsert condition"""
    on_conflict: restore_codes_on_conflict
  ): restore_codes

  """
  insert data into the table: "ritual_type_enum"
  """
  insert_ritual_type_enum(
    """the rows to be inserted"""
    objects: [ritual_type_enum_insert_input!]!

    """upsert condition"""
    on_conflict: ritual_type_enum_on_conflict
  ): ritual_type_enum_mutation_response

  """
  insert a single row into the table: "ritual_type_enum"
  """
  insert_ritual_type_enum_one(
    """the row to be inserted"""
    object: ritual_type_enum_insert_input!

    """upsert condition"""
    on_conflict: ritual_type_enum_on_conflict
  ): ritual_type_enum

  """
  insert data into the table: "sprints"
  """
  insert_sprints(
    """the rows to be inserted"""
    objects: [sprints_insert_input!]!

    """upsert condition"""
    on_conflict: sprints_on_conflict
  ): sprints_mutation_response

  """
  insert a single row into the table: "sprints"
  """
  insert_sprints_one(
    """the row to be inserted"""
    object: sprints_insert_input!

    """upsert condition"""
    on_conflict: sprints_on_conflict
  ): sprints

  """
  insert data into the table: "stories"
  """
  insert_stories(
    """the rows to be inserted"""
    objects: [stories_insert_input!]!

    """upsert condition"""
    on_conflict: stories_on_conflict
  ): stories_mutation_response

  """
  insert data into the table: "stories_messages"
  """
  insert_stories_messages(
    """the rows to be inserted"""
    objects: [stories_messages_insert_input!]!

    """upsert condition"""
    on_conflict: stories_messages_on_conflict
  ): stories_messages_mutation_response

  """
  insert a single row into the table: "stories_messages"
  """
  insert_stories_messages_one(
    """the row to be inserted"""
    object: stories_messages_insert_input!

    """upsert condition"""
    on_conflict: stories_messages_on_conflict
  ): stories_messages

  """
  insert a single row into the table: "stories"
  """
  insert_stories_one(
    """the row to be inserted"""
    object: stories_insert_input!

    """upsert condition"""
    on_conflict: stories_on_conflict
  ): stories

  """
  insert data into the table: "stories_users"
  """
  insert_stories_users(
    """the rows to be inserted"""
    objects: [stories_users_insert_input!]!

    """upsert condition"""
    on_conflict: stories_users_on_conflict
  ): stories_users_mutation_response

  """
  insert a single row into the table: "stories_users"
  """
  insert_stories_users_one(
    """the row to be inserted"""
    object: stories_users_insert_input!

    """upsert condition"""
    on_conflict: stories_users_on_conflict
  ): stories_users

  """
  update data of the table: "achievements"
  """
  update_achievements(
    """sets the columns of the filtered rows to the given values"""
    _set: achievements_set_input

    """filter the rows which have to be updated"""
    where: achievements_bool_exp!
  ): achievements_mutation_response

  """
  update single row of the table: "achievements"
  """
  update_achievements_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: achievements_set_input
    pk_columns: achievements_pk_columns_input!
  ): achievements

  """
  update multiples rows of table: "achievements"
  """
  update_achievements_many(
    """updates to execute, in order"""
    updates: [achievements_updates!]!
  ): [achievements_mutation_response]

  """
  update data of the table: "addons"
  """
  update_addons(
    """sets the columns of the filtered rows to the given values"""
    _set: addons_set_input

    """filter the rows which have to be updated"""
    where: addons_bool_exp!
  ): addons_mutation_response

  """
  update single row of the table: "addons"
  """
  update_addons_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: addons_set_input
    pk_columns: addons_pk_columns_input!
  ): addons

  """
  update data of the table: "addons_enum"
  """
  update_addons_enum(
    """sets the columns of the filtered rows to the given values"""
    _set: addons_enum_set_input

    """filter the rows which have to be updated"""
    where: addons_enum_bool_exp!
  ): addons_enum_mutation_response

  """
  update single row of the table: "addons_enum"
  """
  update_addons_enum_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: addons_enum_set_input
    pk_columns: addons_enum_pk_columns_input!
  ): addons_enum

  """
  update multiples rows of table: "addons_enum"
  """
  update_addons_enum_many(
    """updates to execute, in order"""
    updates: [addons_enum_updates!]!
  ): [addons_enum_mutation_response]

  """
  update multiples rows of table: "addons"
  """
  update_addons_many(
    """updates to execute, in order"""
    updates: [addons_updates!]!
  ): [addons_mutation_response]

  """
  update data of the table: "goal_difficulty_enum"
  """
  update_goal_difficulty_enum(
    """sets the columns of the filtered rows to the given values"""
    _set: goal_difficulty_enum_set_input

    """filter the rows which have to be updated"""
    where: goal_difficulty_enum_bool_exp!
  ): goal_difficulty_enum_mutation_response

  """
  update single row of the table: "goal_difficulty_enum"
  """
  update_goal_difficulty_enum_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: goal_difficulty_enum_set_input
    pk_columns: goal_difficulty_enum_pk_columns_input!
  ): goal_difficulty_enum

  """
  update multiples rows of table: "goal_difficulty_enum"
  """
  update_goal_difficulty_enum_many(
    """updates to execute, in order"""
    updates: [goal_difficulty_enum_updates!]!
  ): [goal_difficulty_enum_mutation_response]

  """
  update data of the table: "goal_status_enum"
  """
  update_goal_status_enum(
    """sets the columns of the filtered rows to the given values"""
    _set: goal_status_enum_set_input

    """filter the rows which have to be updated"""
    where: goal_status_enum_bool_exp!
  ): goal_status_enum_mutation_response

  """
  update single row of the table: "goal_status_enum"
  """
  update_goal_status_enum_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: goal_status_enum_set_input
    pk_columns: goal_status_enum_pk_columns_input!
  ): goal_status_enum

  """
  update multiples rows of table: "goal_status_enum"
  """
  update_goal_status_enum_many(
    """updates to execute, in order"""
    updates: [goal_status_enum_updates!]!
  ): [goal_status_enum_mutation_response]

  """
  update data of the table: "goals"
  """
  update_goals(
    """sets the columns of the filtered rows to the given values"""
    _set: goals_set_input

    """filter the rows which have to be updated"""
    where: goals_bool_exp!
  ): goals_mutation_response

  """
  update single row of the table: "goals"
  """
  update_goals_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: goals_set_input
    pk_columns: goals_pk_columns_input!
  ): goals

  """
  update multiples rows of table: "goals"
  """
  update_goals_many(
    """updates to execute, in order"""
    updates: [goals_updates!]!
  ): [goals_mutation_response]

  """
  update data of the table: "goals_rituals"
  """
  update_goals_rituals(
    """increments the numeric columns with given value of the filtered values"""
    _inc: goals_rituals_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: goals_rituals_set_input

    """filter the rows which have to be updated"""
    where: goals_rituals_bool_exp!
  ): goals_rituals_mutation_response

  """
  update single row of the table: "goals_rituals"
  """
  update_goals_rituals_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: goals_rituals_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: goals_rituals_set_input
    pk_columns: goals_rituals_pk_columns_input!
  ): goals_rituals

  """
  update multiples rows of table: "goals_rituals"
  """
  update_goals_rituals_many(
    """updates to execute, in order"""
    updates: [goals_rituals_updates!]!
  ): [goals_rituals_mutation_response]

  """
  update data of the table: "goals_slides"
  """
  update_goals_slides(
    """sets the columns of the filtered rows to the given values"""
    _set: goals_slides_set_input

    """filter the rows which have to be updated"""
    where: goals_slides_bool_exp!
  ): goals_slides_mutation_response

  """
  update single row of the table: "goals_slides"
  """
  update_goals_slides_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: goals_slides_set_input
    pk_columns: goals_slides_pk_columns_input!
  ): goals_slides

  """
  update multiples rows of table: "goals_slides"
  """
  update_goals_slides_many(
    """updates to execute, in order"""
    updates: [goals_slides_updates!]!
  ): [goals_slides_mutation_response]

  """
  update data of the table: "heroes"
  """
  update_heroes(
    """increments the numeric columns with given value of the filtered values"""
    _inc: heroes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: heroes_set_input

    """filter the rows which have to be updated"""
    where: heroes_bool_exp!
  ): heroes_mutation_response

  """
  update single row of the table: "heroes"
  """
  update_heroes_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: heroes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: heroes_set_input
    pk_columns: heroes_pk_columns_input!
  ): heroes

  """
  update multiples rows of table: "heroes"
  """
  update_heroes_many(
    """updates to execute, in order"""
    updates: [heroes_updates!]!
  ): [heroes_mutation_response]

  """
  update data of the table: "heroes_roles"
  """
  update_heroes_roles(
    """sets the columns of the filtered rows to the given values"""
    _set: heroes_roles_set_input

    """filter the rows which have to be updated"""
    where: heroes_roles_bool_exp!
  ): heroes_roles_mutation_response

  """
  update single row of the table: "heroes_roles"
  """
  update_heroes_roles_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: heroes_roles_set_input
    pk_columns: heroes_roles_pk_columns_input!
  ): heroes_roles

  """
  update multiples rows of table: "heroes_roles"
  """
  update_heroes_roles_many(
    """updates to execute, in order"""
    updates: [heroes_roles_updates!]!
  ): [heroes_roles_mutation_response]

  """
  update data of the table: "heroes_tokens"
  """
  update_heroes_tokens(
    """sets the columns of the filtered rows to the given values"""
    _set: heroes_tokens_set_input

    """filter the rows which have to be updated"""
    where: heroes_tokens_bool_exp!
  ): heroes_tokens_mutation_response

  """
  update single row of the table: "heroes_tokens"
  """
  update_heroes_tokens_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: heroes_tokens_set_input
    pk_columns: heroes_tokens_pk_columns_input!
  ): heroes_tokens

  """
  update multiples rows of table: "heroes_tokens"
  """
  update_heroes_tokens_many(
    """updates to execute, in order"""
    updates: [heroes_tokens_updates!]!
  ): [heroes_tokens_mutation_response]

  """
  update data of the table: "notepad"
  """
  update_notepad(
    """sets the columns of the filtered rows to the given values"""
    _set: notepad_set_input

    """filter the rows which have to be updated"""
    where: notepad_bool_exp!
  ): notepad_mutation_response

  """
  update single row of the table: "notepad"
  """
  update_notepad_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: notepad_set_input
    pk_columns: notepad_pk_columns_input!
  ): notepad

  """
  update multiples rows of table: "notepad"
  """
  update_notepad_many(
    """updates to execute, in order"""
    updates: [notepad_updates!]!
  ): [notepad_mutation_response]

  """
  update data of the table: "notes"
  """
  update_notes(
    """sets the columns of the filtered rows to the given values"""
    _set: notes_set_input

    """filter the rows which have to be updated"""
    where: notes_bool_exp!
  ): notes_mutation_response

  """
  update single row of the table: "notes"
  """
  update_notes_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: notes_set_input
    pk_columns: notes_pk_columns_input!
  ): notes

  """
  update data of the table: "notes_labels"
  """
  update_notes_labels(
    """increments the numeric columns with given value of the filtered values"""
    _inc: notes_labels_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: notes_labels_set_input

    """filter the rows which have to be updated"""
    where: notes_labels_bool_exp!
  ): notes_labels_mutation_response

  """
  update single row of the table: "notes_labels"
  """
  update_notes_labels_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: notes_labels_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: notes_labels_set_input
    pk_columns: notes_labels_pk_columns_input!
  ): notes_labels

  """
  update multiples rows of table: "notes_labels"
  """
  update_notes_labels_many(
    """updates to execute, in order"""
    updates: [notes_labels_updates!]!
  ): [notes_labels_mutation_response]

  """
  update multiples rows of table: "notes"
  """
  update_notes_many(
    """updates to execute, in order"""
    updates: [notes_updates!]!
  ): [notes_mutation_response]

  """
  update data of the table: "privacy_enum"
  """
  update_privacy_enum(
    """sets the columns of the filtered rows to the given values"""
    _set: privacy_enum_set_input

    """filter the rows which have to be updated"""
    where: privacy_enum_bool_exp!
  ): privacy_enum_mutation_response

  """
  update single row of the table: "privacy_enum"
  """
  update_privacy_enum_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: privacy_enum_set_input
    pk_columns: privacy_enum_pk_columns_input!
  ): privacy_enum

  """
  update multiples rows of table: "privacy_enum"
  """
  update_privacy_enum_many(
    """updates to execute, in order"""
    updates: [privacy_enum_updates!]!
  ): [privacy_enum_mutation_response]

  """
  update data of the table: "restore_codes"
  """
  update_restore_codes(
    """sets the columns of the filtered rows to the given values"""
    _set: restore_codes_set_input

    """filter the rows which have to be updated"""
    where: restore_codes_bool_exp!
  ): restore_codes_mutation_response

  """
  update single row of the table: "restore_codes"
  """
  update_restore_codes_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: restore_codes_set_input
    pk_columns: restore_codes_pk_columns_input!
  ): restore_codes

  """
  update data of the table: "restore_codes_enum"
  """
  update_restore_codes_enum(
    """sets the columns of the filtered rows to the given values"""
    _set: restore_codes_enum_set_input

    """filter the rows which have to be updated"""
    where: restore_codes_enum_bool_exp!
  ): restore_codes_enum_mutation_response

  """
  update single row of the table: "restore_codes_enum"
  """
  update_restore_codes_enum_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: restore_codes_enum_set_input
    pk_columns: restore_codes_enum_pk_columns_input!
  ): restore_codes_enum

  """
  update multiples rows of table: "restore_codes_enum"
  """
  update_restore_codes_enum_many(
    """updates to execute, in order"""
    updates: [restore_codes_enum_updates!]!
  ): [restore_codes_enum_mutation_response]

  """
  update multiples rows of table: "restore_codes"
  """
  update_restore_codes_many(
    """updates to execute, in order"""
    updates: [restore_codes_updates!]!
  ): [restore_codes_mutation_response]

  """
  update data of the table: "ritual_type_enum"
  """
  update_ritual_type_enum(
    """sets the columns of the filtered rows to the given values"""
    _set: ritual_type_enum_set_input

    """filter the rows which have to be updated"""
    where: ritual_type_enum_bool_exp!
  ): ritual_type_enum_mutation_response

  """
  update single row of the table: "ritual_type_enum"
  """
  update_ritual_type_enum_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: ritual_type_enum_set_input
    pk_columns: ritual_type_enum_pk_columns_input!
  ): ritual_type_enum

  """
  update multiples rows of table: "ritual_type_enum"
  """
  update_ritual_type_enum_many(
    """updates to execute, in order"""
    updates: [ritual_type_enum_updates!]!
  ): [ritual_type_enum_mutation_response]

  """
  update data of the table: "sprints"
  """
  update_sprints(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: sprints_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: sprints_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: sprints_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: sprints_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: sprints_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: sprints_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: sprints_set_input

    """filter the rows which have to be updated"""
    where: sprints_bool_exp!
  ): sprints_mutation_response

  """
  update single row of the table: "sprints"
  """
  update_sprints_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: sprints_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: sprints_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: sprints_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: sprints_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: sprints_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: sprints_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: sprints_set_input
    pk_columns: sprints_pk_columns_input!
  ): sprints

  """
  update multiples rows of table: "sprints"
  """
  update_sprints_many(
    """updates to execute, in order"""
    updates: [sprints_updates!]!
  ): [sprints_mutation_response]

  """
  update data of the table: "stories"
  """
  update_stories(
    """sets the columns of the filtered rows to the given values"""
    _set: stories_set_input

    """filter the rows which have to be updated"""
    where: stories_bool_exp!
  ): stories_mutation_response

  """
  update single row of the table: "stories"
  """
  update_stories_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: stories_set_input
    pk_columns: stories_pk_columns_input!
  ): stories

  """
  update multiples rows of table: "stories"
  """
  update_stories_many(
    """updates to execute, in order"""
    updates: [stories_updates!]!
  ): [stories_mutation_response]

  """
  update data of the table: "stories_messages"
  """
  update_stories_messages(
    """sets the columns of the filtered rows to the given values"""
    _set: stories_messages_set_input

    """filter the rows which have to be updated"""
    where: stories_messages_bool_exp!
  ): stories_messages_mutation_response

  """
  update single row of the table: "stories_messages"
  """
  update_stories_messages_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: stories_messages_set_input
    pk_columns: stories_messages_pk_columns_input!
  ): stories_messages

  """
  update multiples rows of table: "stories_messages"
  """
  update_stories_messages_many(
    """updates to execute, in order"""
    updates: [stories_messages_updates!]!
  ): [stories_messages_mutation_response]

  """
  update data of the table: "stories_users"
  """
  update_stories_users(
    """sets the columns of the filtered rows to the given values"""
    _set: stories_users_set_input

    """filter the rows which have to be updated"""
    where: stories_users_bool_exp!
  ): stories_users_mutation_response

  """
  update single row of the table: "stories_users"
  """
  update_stories_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: stories_users_set_input
    pk_columns: stories_users_pk_columns_input!
  ): stories_users

  """
  update multiples rows of table: "stories_users"
  """
  update_stories_users_many(
    """updates to execute, in order"""
    updates: [stories_users_updates!]!
  ): [stories_users_mutation_response]
}

"""real time info"""
type notepad {
  active: Boolean!
  description: String!

  """An object relationship"""
  hero: heroes!
  id: uuid!
  locked: Boolean!
  owner_id: uuid!
}

"""
aggregated selection of "notepad"
"""
type notepad_aggregate {
  aggregate: notepad_aggregate_fields
  nodes: [notepad!]!
}

"""
aggregate fields of "notepad"
"""
type notepad_aggregate_fields {
  count(columns: [notepad_select_column!], distinct: Boolean): Int!
  max: notepad_max_fields
  min: notepad_min_fields
}

"""
Boolean expression to filter rows from the table "notepad". All fields are combined with a logical 'AND'.
"""
input notepad_bool_exp {
  _and: [notepad_bool_exp!]
  _not: notepad_bool_exp
  _or: [notepad_bool_exp!]
  active: Boolean_comparison_exp
  description: String_comparison_exp
  hero: heroes_bool_exp
  id: uuid_comparison_exp
  locked: Boolean_comparison_exp
  owner_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "notepad"
"""
enum notepad_constraint {
  """
  unique or primary key constraint on columns "owner_id"
  """
  notepad_pkey
}

"""
input type for inserting data into table "notepad"
"""
input notepad_insert_input {
  active: Boolean
  description: String
  hero: heroes_obj_rel_insert_input
  id: uuid
  locked: Boolean
  owner_id: uuid
}

"""aggregate max on columns"""
type notepad_max_fields {
  description: String
  id: uuid
  owner_id: uuid
}

"""aggregate min on columns"""
type notepad_min_fields {
  description: String
  id: uuid
  owner_id: uuid
}

"""
response of any mutation on the table "notepad"
"""
type notepad_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [notepad!]!
}

"""
input type for inserting object relation for remote table "notepad"
"""
input notepad_obj_rel_insert_input {
  data: notepad_insert_input!

  """upsert condition"""
  on_conflict: notepad_on_conflict
}

"""
on_conflict condition type for table "notepad"
"""
input notepad_on_conflict {
  constraint: notepad_constraint!
  update_columns: [notepad_update_column!]! = []
  where: notepad_bool_exp
}

"""Ordering options when selecting data from "notepad"."""
input notepad_order_by {
  active: order_by
  description: order_by
  hero: heroes_order_by
  id: order_by
  locked: order_by
  owner_id: order_by
}

"""primary key columns input for table: notepad"""
input notepad_pk_columns_input {
  owner_id: uuid!
}

"""
select columns of table "notepad"
"""
enum notepad_select_column {
  """column name"""
  active

  """column name"""
  description

  """column name"""
  id

  """column name"""
  locked

  """column name"""
  owner_id
}

"""
input type for updating data in table "notepad"
"""
input notepad_set_input {
  active: Boolean
  description: String
  id: uuid
  locked: Boolean
  owner_id: uuid
}

"""
Streaming cursor of the table "notepad"
"""
input notepad_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: notepad_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input notepad_stream_cursor_value_input {
  active: Boolean
  description: String
  id: uuid
  locked: Boolean
  owner_id: uuid
}

"""
update columns of table "notepad"
"""
enum notepad_update_column {
  """column name"""
  active

  """column name"""
  description

  """column name"""
  id

  """column name"""
  locked

  """column name"""
  owner_id
}

input notepad_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: notepad_set_input

  """filter the rows which have to be updated"""
  where: notepad_bool_exp!
}

"""
columns and relationships of "notes"
"""
type notes {
  archived: Boolean
  created_at: timestamptz!
  deleted_at: timestamptz
  description: String!

  """An object relationship"""
  hero: heroes
  id: uuid!
  is_favorite: Boolean

  """An object relationship"""
  label: notes_labels
  label_id: uuid
  owner_id: uuid
  tag: String
  updated_at: timestamptz!
}

"""
aggregated selection of "notes"
"""
type notes_aggregate {
  aggregate: notes_aggregate_fields
  nodes: [notes!]!
}

input notes_aggregate_bool_exp {
  bool_and: notes_aggregate_bool_exp_bool_and
  bool_or: notes_aggregate_bool_exp_bool_or
  count: notes_aggregate_bool_exp_count
}

input notes_aggregate_bool_exp_bool_and {
  arguments: notes_select_column_notes_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: notes_bool_exp
  predicate: Boolean_comparison_exp!
}

input notes_aggregate_bool_exp_bool_or {
  arguments: notes_select_column_notes_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: notes_bool_exp
  predicate: Boolean_comparison_exp!
}

input notes_aggregate_bool_exp_count {
  arguments: [notes_select_column!]
  distinct: Boolean
  filter: notes_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "notes"
"""
type notes_aggregate_fields {
  count(columns: [notes_select_column!], distinct: Boolean): Int!
  max: notes_max_fields
  min: notes_min_fields
}

"""
order by aggregate values of table "notes"
"""
input notes_aggregate_order_by {
  count: order_by
  max: notes_max_order_by
  min: notes_min_order_by
}

"""
input type for inserting array relation for remote table "notes"
"""
input notes_arr_rel_insert_input {
  data: [notes_insert_input!]!

  """upsert condition"""
  on_conflict: notes_on_conflict
}

"""
Boolean expression to filter rows from the table "notes". All fields are combined with a logical 'AND'.
"""
input notes_bool_exp {
  _and: [notes_bool_exp!]
  _not: notes_bool_exp
  _or: [notes_bool_exp!]
  archived: Boolean_comparison_exp
  created_at: timestamptz_comparison_exp
  deleted_at: timestamptz_comparison_exp
  description: String_comparison_exp
  hero: heroes_bool_exp
  id: uuid_comparison_exp
  is_favorite: Boolean_comparison_exp
  label: notes_labels_bool_exp
  label_id: uuid_comparison_exp
  owner_id: uuid_comparison_exp
  tag: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "notes"
"""
enum notes_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  tasks_pkey
}

"""
input type for inserting data into table "notes"
"""
input notes_insert_input {
  archived: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  hero: heroes_obj_rel_insert_input
  id: uuid
  is_favorite: Boolean
  label: notes_labels_obj_rel_insert_input
  label_id: uuid
  owner_id: uuid
  tag: String
  updated_at: timestamptz
}

"""
columns and relationships of "notes_labels"
"""
type notes_labels {
  created_at: timestamptz
  id: uuid!
  name: String!
  owner_id: uuid!
  rating: Int!
}

"""
aggregated selection of "notes_labels"
"""
type notes_labels_aggregate {
  aggregate: notes_labels_aggregate_fields
  nodes: [notes_labels!]!
}

"""
aggregate fields of "notes_labels"
"""
type notes_labels_aggregate_fields {
  avg: notes_labels_avg_fields
  count(columns: [notes_labels_select_column!], distinct: Boolean): Int!
  max: notes_labels_max_fields
  min: notes_labels_min_fields
  stddev: notes_labels_stddev_fields
  stddev_pop: notes_labels_stddev_pop_fields
  stddev_samp: notes_labels_stddev_samp_fields
  sum: notes_labels_sum_fields
  var_pop: notes_labels_var_pop_fields
  var_samp: notes_labels_var_samp_fields
  variance: notes_labels_variance_fields
}

"""aggregate avg on columns"""
type notes_labels_avg_fields {
  rating: Float
}

"""
Boolean expression to filter rows from the table "notes_labels". All fields are combined with a logical 'AND'.
"""
input notes_labels_bool_exp {
  _and: [notes_labels_bool_exp!]
  _not: notes_labels_bool_exp
  _or: [notes_labels_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  owner_id: uuid_comparison_exp
  rating: Int_comparison_exp
}

"""
unique or primary key constraints on table "notes_labels"
"""
enum notes_labels_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  notes_labels_pkey
}

"""
input type for incrementing numeric columns in table "notes_labels"
"""
input notes_labels_inc_input {
  rating: Int
}

"""
input type for inserting data into table "notes_labels"
"""
input notes_labels_insert_input {
  created_at: timestamptz
  id: uuid
  name: String
  owner_id: uuid
  rating: Int
}

"""aggregate max on columns"""
type notes_labels_max_fields {
  created_at: timestamptz
  id: uuid
  name: String
  owner_id: uuid
  rating: Int
}

"""aggregate min on columns"""
type notes_labels_min_fields {
  created_at: timestamptz
  id: uuid
  name: String
  owner_id: uuid
  rating: Int
}

"""
response of any mutation on the table "notes_labels"
"""
type notes_labels_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [notes_labels!]!
}

"""
input type for inserting object relation for remote table "notes_labels"
"""
input notes_labels_obj_rel_insert_input {
  data: notes_labels_insert_input!

  """upsert condition"""
  on_conflict: notes_labels_on_conflict
}

"""
on_conflict condition type for table "notes_labels"
"""
input notes_labels_on_conflict {
  constraint: notes_labels_constraint!
  update_columns: [notes_labels_update_column!]! = []
  where: notes_labels_bool_exp
}

"""Ordering options when selecting data from "notes_labels"."""
input notes_labels_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  owner_id: order_by
  rating: order_by
}

"""primary key columns input for table: notes_labels"""
input notes_labels_pk_columns_input {
  id: uuid!
}

"""
select columns of table "notes_labels"
"""
enum notes_labels_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  owner_id

  """column name"""
  rating
}

"""
input type for updating data in table "notes_labels"
"""
input notes_labels_set_input {
  created_at: timestamptz
  id: uuid
  name: String
  owner_id: uuid
  rating: Int
}

"""aggregate stddev on columns"""
type notes_labels_stddev_fields {
  rating: Float
}

"""aggregate stddev_pop on columns"""
type notes_labels_stddev_pop_fields {
  rating: Float
}

"""aggregate stddev_samp on columns"""
type notes_labels_stddev_samp_fields {
  rating: Float
}

"""
Streaming cursor of the table "notes_labels"
"""
input notes_labels_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: notes_labels_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input notes_labels_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  name: String
  owner_id: uuid
  rating: Int
}

"""aggregate sum on columns"""
type notes_labels_sum_fields {
  rating: Int
}

"""
update columns of table "notes_labels"
"""
enum notes_labels_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  owner_id

  """column name"""
  rating
}

input notes_labels_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: notes_labels_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: notes_labels_set_input

  """filter the rows which have to be updated"""
  where: notes_labels_bool_exp!
}

"""aggregate var_pop on columns"""
type notes_labels_var_pop_fields {
  rating: Float
}

"""aggregate var_samp on columns"""
type notes_labels_var_samp_fields {
  rating: Float
}

"""aggregate variance on columns"""
type notes_labels_variance_fields {
  rating: Float
}

"""aggregate max on columns"""
type notes_max_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  id: uuid
  label_id: uuid
  owner_id: uuid
  tag: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "notes"
"""
input notes_max_order_by {
  created_at: order_by
  deleted_at: order_by
  description: order_by
  id: order_by
  label_id: order_by
  owner_id: order_by
  tag: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type notes_min_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  id: uuid
  label_id: uuid
  owner_id: uuid
  tag: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "notes"
"""
input notes_min_order_by {
  created_at: order_by
  deleted_at: order_by
  description: order_by
  id: order_by
  label_id: order_by
  owner_id: order_by
  tag: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "notes"
"""
type notes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [notes!]!
}

"""
on_conflict condition type for table "notes"
"""
input notes_on_conflict {
  constraint: notes_constraint!
  update_columns: [notes_update_column!]! = []
  where: notes_bool_exp
}

"""Ordering options when selecting data from "notes"."""
input notes_order_by {
  archived: order_by
  created_at: order_by
  deleted_at: order_by
  description: order_by
  hero: heroes_order_by
  id: order_by
  is_favorite: order_by
  label: notes_labels_order_by
  label_id: order_by
  owner_id: order_by
  tag: order_by
  updated_at: order_by
}

"""primary key columns input for table: notes"""
input notes_pk_columns_input {
  id: uuid!
}

"""
select columns of table "notes"
"""
enum notes_select_column {
  """column name"""
  archived

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  is_favorite

  """column name"""
  label_id

  """column name"""
  owner_id

  """column name"""
  tag

  """column name"""
  updated_at
}

"""
select "notes_aggregate_bool_exp_bool_and_arguments_columns" columns of table "notes"
"""
enum notes_select_column_notes_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  archived

  """column name"""
  is_favorite
}

"""
select "notes_aggregate_bool_exp_bool_or_arguments_columns" columns of table "notes"
"""
enum notes_select_column_notes_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  archived

  """column name"""
  is_favorite
}

"""
input type for updating data in table "notes"
"""
input notes_set_input {
  archived: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  id: uuid
  is_favorite: Boolean
  label_id: uuid
  owner_id: uuid
  tag: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "notes"
"""
input notes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: notes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input notes_stream_cursor_value_input {
  archived: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  id: uuid
  is_favorite: Boolean
  label_id: uuid
  owner_id: uuid
  tag: String
  updated_at: timestamptz
}

"""
update columns of table "notes"
"""
enum notes_update_column {
  """column name"""
  archived

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  is_favorite

  """column name"""
  label_id

  """column name"""
  owner_id

  """column name"""
  tag

  """column name"""
  updated_at
}

input notes_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: notes_set_input

  """filter the rows which have to be updated"""
  where: notes_bool_exp!
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""privacy status"""
type privacy_enum {
  description: String!

  """An array relationship"""
  goals(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): [goals!]!

  """An aggregate relationship"""
  goals_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): goals_aggregate!
  privacy: String!
}

"""
aggregated selection of "privacy_enum"
"""
type privacy_enum_aggregate {
  aggregate: privacy_enum_aggregate_fields
  nodes: [privacy_enum!]!
}

"""
aggregate fields of "privacy_enum"
"""
type privacy_enum_aggregate_fields {
  count(columns: [privacy_enum_select_column!], distinct: Boolean): Int!
  max: privacy_enum_max_fields
  min: privacy_enum_min_fields
}

"""
Boolean expression to filter rows from the table "privacy_enum". All fields are combined with a logical 'AND'.
"""
input privacy_enum_bool_exp {
  _and: [privacy_enum_bool_exp!]
  _not: privacy_enum_bool_exp
  _or: [privacy_enum_bool_exp!]
  description: String_comparison_exp
  goals: goals_bool_exp
  goals_aggregate: goals_aggregate_bool_exp
  privacy: String_comparison_exp
}

"""
unique or primary key constraints on table "privacy_enum"
"""
enum privacy_enum_constraint {
  """
  unique or primary key constraint on columns "privacy"
  """
  privacy_enum_pkey
}

"""
input type for inserting data into table "privacy_enum"
"""
input privacy_enum_insert_input {
  description: String
  goals: goals_arr_rel_insert_input
  privacy: String
}

"""aggregate max on columns"""
type privacy_enum_max_fields {
  description: String
  privacy: String
}

"""aggregate min on columns"""
type privacy_enum_min_fields {
  description: String
  privacy: String
}

"""
response of any mutation on the table "privacy_enum"
"""
type privacy_enum_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [privacy_enum!]!
}

"""
input type for inserting object relation for remote table "privacy_enum"
"""
input privacy_enum_obj_rel_insert_input {
  data: privacy_enum_insert_input!

  """upsert condition"""
  on_conflict: privacy_enum_on_conflict
}

"""
on_conflict condition type for table "privacy_enum"
"""
input privacy_enum_on_conflict {
  constraint: privacy_enum_constraint!
  update_columns: [privacy_enum_update_column!]! = []
  where: privacy_enum_bool_exp
}

"""Ordering options when selecting data from "privacy_enum"."""
input privacy_enum_order_by {
  description: order_by
  goals_aggregate: goals_aggregate_order_by
  privacy: order_by
}

"""primary key columns input for table: privacy_enum"""
input privacy_enum_pk_columns_input {
  privacy: String!
}

"""
select columns of table "privacy_enum"
"""
enum privacy_enum_select_column {
  """column name"""
  description

  """column name"""
  privacy
}

"""
input type for updating data in table "privacy_enum"
"""
input privacy_enum_set_input {
  description: String
  privacy: String
}

"""
Streaming cursor of the table "privacy_enum"
"""
input privacy_enum_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: privacy_enum_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input privacy_enum_stream_cursor_value_input {
  description: String
  privacy: String
}

"""
update columns of table "privacy_enum"
"""
enum privacy_enum_update_column {
  """column name"""
  description

  """column name"""
  privacy
}

input privacy_enum_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: privacy_enum_set_input

  """filter the rows which have to be updated"""
  where: privacy_enum_bool_exp!
}

type query_root {
  """An array relationship"""
  achievements(
    """distinct select on columns"""
    distinct_on: [achievements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [achievements_order_by!]

    """filter the rows returned"""
    where: achievements_bool_exp
  ): [achievements!]!

  """An aggregate relationship"""
  achievements_aggregate(
    """distinct select on columns"""
    distinct_on: [achievements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [achievements_order_by!]

    """filter the rows returned"""
    where: achievements_bool_exp
  ): achievements_aggregate!

  """fetch data from the table: "achievements" using primary key columns"""
  achievements_by_pk(id: uuid!): achievements

  """An array relationship"""
  addons(
    """distinct select on columns"""
    distinct_on: [addons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addons_order_by!]

    """filter the rows returned"""
    where: addons_bool_exp
  ): [addons!]!

  """An aggregate relationship"""
  addons_aggregate(
    """distinct select on columns"""
    distinct_on: [addons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addons_order_by!]

    """filter the rows returned"""
    where: addons_bool_exp
  ): addons_aggregate!

  """fetch data from the table: "addons" using primary key columns"""
  addons_by_pk(addon: String!, owner_id: uuid!): addons

  """
  fetch data from the table: "addons_enum"
  """
  addons_enum(
    """distinct select on columns"""
    distinct_on: [addons_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addons_enum_order_by!]

    """filter the rows returned"""
    where: addons_enum_bool_exp
  ): [addons_enum!]!

  """
  fetch aggregated fields from the table: "addons_enum"
  """
  addons_enum_aggregate(
    """distinct select on columns"""
    distinct_on: [addons_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addons_enum_order_by!]

    """filter the rows returned"""
    where: addons_enum_bool_exp
  ): addons_enum_aggregate!

  """fetch data from the table: "addons_enum" using primary key columns"""
  addons_enum_by_pk(addon: String!): addons_enum

  """
  fetch data from the table: "goal_difficulty_enum"
  """
  goal_difficulty_enum(
    """distinct select on columns"""
    distinct_on: [goal_difficulty_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goal_difficulty_enum_order_by!]

    """filter the rows returned"""
    where: goal_difficulty_enum_bool_exp
  ): [goal_difficulty_enum!]!

  """
  fetch aggregated fields from the table: "goal_difficulty_enum"
  """
  goal_difficulty_enum_aggregate(
    """distinct select on columns"""
    distinct_on: [goal_difficulty_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goal_difficulty_enum_order_by!]

    """filter the rows returned"""
    where: goal_difficulty_enum_bool_exp
  ): goal_difficulty_enum_aggregate!

  """
  fetch data from the table: "goal_difficulty_enum" using primary key columns
  """
  goal_difficulty_enum_by_pk(difficulty: String!): goal_difficulty_enum

  """
  fetch data from the table: "goal_status_enum"
  """
  goal_status_enum(
    """distinct select on columns"""
    distinct_on: [goal_status_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goal_status_enum_order_by!]

    """filter the rows returned"""
    where: goal_status_enum_bool_exp
  ): [goal_status_enum!]!

  """
  fetch aggregated fields from the table: "goal_status_enum"
  """
  goal_status_enum_aggregate(
    """distinct select on columns"""
    distinct_on: [goal_status_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goal_status_enum_order_by!]

    """filter the rows returned"""
    where: goal_status_enum_bool_exp
  ): goal_status_enum_aggregate!

  """
  fetch data from the table: "goal_status_enum" using primary key columns
  """
  goal_status_enum_by_pk(status: String!): goal_status_enum

  """An array relationship"""
  goals(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): [goals!]!

  """An aggregate relationship"""
  goals_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): goals_aggregate!

  """fetch data from the table: "goals" using primary key columns"""
  goals_by_pk(id: uuid!): goals

  """An array relationship"""
  goals_rituals(
    """distinct select on columns"""
    distinct_on: [goals_rituals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_rituals_order_by!]

    """filter the rows returned"""
    where: goals_rituals_bool_exp
  ): [goals_rituals!]!

  """An aggregate relationship"""
  goals_rituals_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_rituals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_rituals_order_by!]

    """filter the rows returned"""
    where: goals_rituals_bool_exp
  ): goals_rituals_aggregate!

  """fetch data from the table: "goals_rituals" using primary key columns"""
  goals_rituals_by_pk(goal_id: uuid!, ritual_id: uuid!): goals_rituals

  """An array relationship"""
  goals_slides(
    """distinct select on columns"""
    distinct_on: [goals_slides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_slides_order_by!]

    """filter the rows returned"""
    where: goals_slides_bool_exp
  ): [goals_slides!]!

  """An aggregate relationship"""
  goals_slides_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_slides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_slides_order_by!]

    """filter the rows returned"""
    where: goals_slides_bool_exp
  ): goals_slides_aggregate!

  """fetch data from the table: "goals_slides" using primary key columns"""
  goals_slides_by_pk(id: uuid!): goals_slides

  """An array relationship"""
  heroes(
    """distinct select on columns"""
    distinct_on: [heroes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_order_by!]

    """filter the rows returned"""
    where: heroes_bool_exp
  ): [heroes!]!

  """An aggregate relationship"""
  heroes_aggregate(
    """distinct select on columns"""
    distinct_on: [heroes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_order_by!]

    """filter the rows returned"""
    where: heroes_bool_exp
  ): heroes_aggregate!

  """fetch data from the table: "heroes" using primary key columns"""
  heroes_by_pk(id: uuid!): heroes

  """
  fetch data from the table: "heroes_roles"
  """
  heroes_roles(
    """distinct select on columns"""
    distinct_on: [heroes_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_roles_order_by!]

    """filter the rows returned"""
    where: heroes_roles_bool_exp
  ): [heroes_roles!]!

  """
  fetch aggregated fields from the table: "heroes_roles"
  """
  heroes_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [heroes_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_roles_order_by!]

    """filter the rows returned"""
    where: heroes_roles_bool_exp
  ): heroes_roles_aggregate!

  """fetch data from the table: "heroes_roles" using primary key columns"""
  heroes_roles_by_pk(role: String!): heroes_roles

  """
  fetch data from the table: "heroes_tokens"
  """
  heroes_tokens(
    """distinct select on columns"""
    distinct_on: [heroes_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_tokens_order_by!]

    """filter the rows returned"""
    where: heroes_tokens_bool_exp
  ): [heroes_tokens!]!

  """
  fetch aggregated fields from the table: "heroes_tokens"
  """
  heroes_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [heroes_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_tokens_order_by!]

    """filter the rows returned"""
    where: heroes_tokens_bool_exp
  ): heroes_tokens_aggregate!

  """fetch data from the table: "heroes_tokens" using primary key columns"""
  heroes_tokens_by_pk(session_id: uuid!): heroes_tokens

  """
  fetch data from the table: "notepad"
  """
  notepad(
    """distinct select on columns"""
    distinct_on: [notepad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notepad_order_by!]

    """filter the rows returned"""
    where: notepad_bool_exp
  ): [notepad!]!

  """
  fetch aggregated fields from the table: "notepad"
  """
  notepad_aggregate(
    """distinct select on columns"""
    distinct_on: [notepad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notepad_order_by!]

    """filter the rows returned"""
    where: notepad_bool_exp
  ): notepad_aggregate!

  """fetch data from the table: "notepad" using primary key columns"""
  notepad_by_pk(owner_id: uuid!): notepad

  """An array relationship"""
  notes(
    """distinct select on columns"""
    distinct_on: [notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notes_order_by!]

    """filter the rows returned"""
    where: notes_bool_exp
  ): [notes!]!

  """An aggregate relationship"""
  notes_aggregate(
    """distinct select on columns"""
    distinct_on: [notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notes_order_by!]

    """filter the rows returned"""
    where: notes_bool_exp
  ): notes_aggregate!

  """fetch data from the table: "notes" using primary key columns"""
  notes_by_pk(id: uuid!): notes

  """
  fetch data from the table: "notes_labels"
  """
  notes_labels(
    """distinct select on columns"""
    distinct_on: [notes_labels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notes_labels_order_by!]

    """filter the rows returned"""
    where: notes_labels_bool_exp
  ): [notes_labels!]!

  """
  fetch aggregated fields from the table: "notes_labels"
  """
  notes_labels_aggregate(
    """distinct select on columns"""
    distinct_on: [notes_labels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notes_labels_order_by!]

    """filter the rows returned"""
    where: notes_labels_bool_exp
  ): notes_labels_aggregate!

  """fetch data from the table: "notes_labels" using primary key columns"""
  notes_labels_by_pk(id: uuid!): notes_labels

  """
  fetch data from the table: "privacy_enum"
  """
  privacy_enum(
    """distinct select on columns"""
    distinct_on: [privacy_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [privacy_enum_order_by!]

    """filter the rows returned"""
    where: privacy_enum_bool_exp
  ): [privacy_enum!]!

  """
  fetch aggregated fields from the table: "privacy_enum"
  """
  privacy_enum_aggregate(
    """distinct select on columns"""
    distinct_on: [privacy_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [privacy_enum_order_by!]

    """filter the rows returned"""
    where: privacy_enum_bool_exp
  ): privacy_enum_aggregate!

  """fetch data from the table: "privacy_enum" using primary key columns"""
  privacy_enum_by_pk(privacy: String!): privacy_enum

  """
  fetch data from the table: "restore_codes"
  """
  restore_codes(
    """distinct select on columns"""
    distinct_on: [restore_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restore_codes_order_by!]

    """filter the rows returned"""
    where: restore_codes_bool_exp
  ): [restore_codes!]!

  """
  fetch aggregated fields from the table: "restore_codes"
  """
  restore_codes_aggregate(
    """distinct select on columns"""
    distinct_on: [restore_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restore_codes_order_by!]

    """filter the rows returned"""
    where: restore_codes_bool_exp
  ): restore_codes_aggregate!

  """fetch data from the table: "restore_codes" using primary key columns"""
  restore_codes_by_pk(id: uuid!): restore_codes

  """
  fetch data from the table: "restore_codes_enum"
  """
  restore_codes_enum(
    """distinct select on columns"""
    distinct_on: [restore_codes_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restore_codes_enum_order_by!]

    """filter the rows returned"""
    where: restore_codes_enum_bool_exp
  ): [restore_codes_enum!]!

  """
  fetch aggregated fields from the table: "restore_codes_enum"
  """
  restore_codes_enum_aggregate(
    """distinct select on columns"""
    distinct_on: [restore_codes_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restore_codes_enum_order_by!]

    """filter the rows returned"""
    where: restore_codes_enum_bool_exp
  ): restore_codes_enum_aggregate!

  """
  fetch data from the table: "restore_codes_enum" using primary key columns
  """
  restore_codes_enum_by_pk(type: String!): restore_codes_enum

  """
  fetch data from the table: "ritual_type_enum"
  """
  ritual_type_enum(
    """distinct select on columns"""
    distinct_on: [ritual_type_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ritual_type_enum_order_by!]

    """filter the rows returned"""
    where: ritual_type_enum_bool_exp
  ): [ritual_type_enum!]!

  """
  fetch aggregated fields from the table: "ritual_type_enum"
  """
  ritual_type_enum_aggregate(
    """distinct select on columns"""
    distinct_on: [ritual_type_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ritual_type_enum_order_by!]

    """filter the rows returned"""
    where: ritual_type_enum_bool_exp
  ): ritual_type_enum_aggregate!

  """
  fetch data from the table: "ritual_type_enum" using primary key columns
  """
  ritual_type_enum_by_pk(ritual_type: String!): ritual_type_enum

  """An array relationship"""
  sprints(
    """distinct select on columns"""
    distinct_on: [sprints_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sprints_order_by!]

    """filter the rows returned"""
    where: sprints_bool_exp
  ): [sprints!]!

  """An aggregate relationship"""
  sprints_aggregate(
    """distinct select on columns"""
    distinct_on: [sprints_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sprints_order_by!]

    """filter the rows returned"""
    where: sprints_bool_exp
  ): sprints_aggregate!

  """fetch data from the table: "sprints" using primary key columns"""
  sprints_by_pk(id: uuid!): sprints

  """
  fetch data from the table: "stories"
  """
  stories(
    """distinct select on columns"""
    distinct_on: [stories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stories_order_by!]

    """filter the rows returned"""
    where: stories_bool_exp
  ): [stories!]!

  """
  fetch aggregated fields from the table: "stories"
  """
  stories_aggregate(
    """distinct select on columns"""
    distinct_on: [stories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stories_order_by!]

    """filter the rows returned"""
    where: stories_bool_exp
  ): stories_aggregate!

  """fetch data from the table: "stories" using primary key columns"""
  stories_by_pk(id: uuid!): stories

  """An array relationship"""
  stories_messages(
    """distinct select on columns"""
    distinct_on: [stories_messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stories_messages_order_by!]

    """filter the rows returned"""
    where: stories_messages_bool_exp
  ): [stories_messages!]!

  """An aggregate relationship"""
  stories_messages_aggregate(
    """distinct select on columns"""
    distinct_on: [stories_messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stories_messages_order_by!]

    """filter the rows returned"""
    where: stories_messages_bool_exp
  ): stories_messages_aggregate!

  """
  fetch data from the table: "stories_messages" using primary key columns
  """
  stories_messages_by_pk(id: uuid!): stories_messages

  """
  fetch data from the table: "stories_users"
  """
  stories_users(
    """distinct select on columns"""
    distinct_on: [stories_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stories_users_order_by!]

    """filter the rows returned"""
    where: stories_users_bool_exp
  ): [stories_users!]!

  """
  fetch aggregated fields from the table: "stories_users"
  """
  stories_users_aggregate(
    """distinct select on columns"""
    distinct_on: [stories_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stories_users_order_by!]

    """filter the rows returned"""
    where: stories_users_bool_exp
  ): stories_users_aggregate!

  """fetch data from the table: "stories_users" using primary key columns"""
  stories_users_by_pk(story_id: uuid!, user_id: uuid!): stories_users
}

"""restore_password_codes"""
type restore_codes {
  created_at: timestamptz
  email: String!
  id: uuid!
  secret: String
  type: restore_codes_enum_enum
}

"""
aggregated selection of "restore_codes"
"""
type restore_codes_aggregate {
  aggregate: restore_codes_aggregate_fields
  nodes: [restore_codes!]!
}

"""
aggregate fields of "restore_codes"
"""
type restore_codes_aggregate_fields {
  count(columns: [restore_codes_select_column!], distinct: Boolean): Int!
  max: restore_codes_max_fields
  min: restore_codes_min_fields
}

"""
Boolean expression to filter rows from the table "restore_codes". All fields are combined with a logical 'AND'.
"""
input restore_codes_bool_exp {
  _and: [restore_codes_bool_exp!]
  _not: restore_codes_bool_exp
  _or: [restore_codes_bool_exp!]
  created_at: timestamptz_comparison_exp
  email: String_comparison_exp
  id: uuid_comparison_exp
  secret: String_comparison_exp
  type: restore_codes_enum_enum_comparison_exp
}

"""
unique or primary key constraints on table "restore_codes"
"""
enum restore_codes_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  restore_codes_pkey
}

"""
columns and relationships of "restore_codes_enum"
"""
type restore_codes_enum {
  description: String!
  type: String!
}

"""
aggregated selection of "restore_codes_enum"
"""
type restore_codes_enum_aggregate {
  aggregate: restore_codes_enum_aggregate_fields
  nodes: [restore_codes_enum!]!
}

"""
aggregate fields of "restore_codes_enum"
"""
type restore_codes_enum_aggregate_fields {
  count(columns: [restore_codes_enum_select_column!], distinct: Boolean): Int!
  max: restore_codes_enum_max_fields
  min: restore_codes_enum_min_fields
}

"""
Boolean expression to filter rows from the table "restore_codes_enum". All fields are combined with a logical 'AND'.
"""
input restore_codes_enum_bool_exp {
  _and: [restore_codes_enum_bool_exp!]
  _not: restore_codes_enum_bool_exp
  _or: [restore_codes_enum_bool_exp!]
  description: String_comparison_exp
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "restore_codes_enum"
"""
enum restore_codes_enum_constraint {
  """
  unique or primary key constraint on columns "type"
  """
  restore_codes_enum_pkey
}

enum restore_codes_enum_enum {
  """restore code"""
  restoration
}

"""
Boolean expression to compare columns of type "restore_codes_enum_enum". All fields are combined with logical 'AND'.
"""
input restore_codes_enum_enum_comparison_exp {
  _eq: restore_codes_enum_enum
  _in: [restore_codes_enum_enum!]
  _is_null: Boolean
  _neq: restore_codes_enum_enum
  _nin: [restore_codes_enum_enum!]
}

"""
input type for inserting data into table "restore_codes_enum"
"""
input restore_codes_enum_insert_input {
  description: String
  type: String
}

"""aggregate max on columns"""
type restore_codes_enum_max_fields {
  description: String
  type: String
}

"""aggregate min on columns"""
type restore_codes_enum_min_fields {
  description: String
  type: String
}

"""
response of any mutation on the table "restore_codes_enum"
"""
type restore_codes_enum_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [restore_codes_enum!]!
}

"""
on_conflict condition type for table "restore_codes_enum"
"""
input restore_codes_enum_on_conflict {
  constraint: restore_codes_enum_constraint!
  update_columns: [restore_codes_enum_update_column!]! = []
  where: restore_codes_enum_bool_exp
}

"""Ordering options when selecting data from "restore_codes_enum"."""
input restore_codes_enum_order_by {
  description: order_by
  type: order_by
}

"""primary key columns input for table: restore_codes_enum"""
input restore_codes_enum_pk_columns_input {
  type: String!
}

"""
select columns of table "restore_codes_enum"
"""
enum restore_codes_enum_select_column {
  """column name"""
  description

  """column name"""
  type
}

"""
input type for updating data in table "restore_codes_enum"
"""
input restore_codes_enum_set_input {
  description: String
  type: String
}

"""
Streaming cursor of the table "restore_codes_enum"
"""
input restore_codes_enum_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: restore_codes_enum_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input restore_codes_enum_stream_cursor_value_input {
  description: String
  type: String
}

"""
update columns of table "restore_codes_enum"
"""
enum restore_codes_enum_update_column {
  """column name"""
  description

  """column name"""
  type
}

input restore_codes_enum_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: restore_codes_enum_set_input

  """filter the rows which have to be updated"""
  where: restore_codes_enum_bool_exp!
}

"""
input type for inserting data into table "restore_codes"
"""
input restore_codes_insert_input {
  created_at: timestamptz
  email: String
  id: uuid
  secret: String
  type: restore_codes_enum_enum
}

"""aggregate max on columns"""
type restore_codes_max_fields {
  created_at: timestamptz
  email: String
  id: uuid
  secret: String
}

"""aggregate min on columns"""
type restore_codes_min_fields {
  created_at: timestamptz
  email: String
  id: uuid
  secret: String
}

"""
response of any mutation on the table "restore_codes"
"""
type restore_codes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [restore_codes!]!
}

"""
on_conflict condition type for table "restore_codes"
"""
input restore_codes_on_conflict {
  constraint: restore_codes_constraint!
  update_columns: [restore_codes_update_column!]! = []
  where: restore_codes_bool_exp
}

"""Ordering options when selecting data from "restore_codes"."""
input restore_codes_order_by {
  created_at: order_by
  email: order_by
  id: order_by
  secret: order_by
  type: order_by
}

"""primary key columns input for table: restore_codes"""
input restore_codes_pk_columns_input {
  id: uuid!
}

"""
select columns of table "restore_codes"
"""
enum restore_codes_select_column {
  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  secret

  """column name"""
  type
}

"""
input type for updating data in table "restore_codes"
"""
input restore_codes_set_input {
  created_at: timestamptz
  email: String
  id: uuid
  secret: String
  type: restore_codes_enum_enum
}

"""
Streaming cursor of the table "restore_codes"
"""
input restore_codes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: restore_codes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input restore_codes_stream_cursor_value_input {
  created_at: timestamptz
  email: String
  id: uuid
  secret: String
  type: restore_codes_enum_enum
}

"""
update columns of table "restore_codes"
"""
enum restore_codes_update_column {
  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  secret

  """column name"""
  type
}

input restore_codes_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: restore_codes_set_input

  """filter the rows which have to be updated"""
  where: restore_codes_bool_exp!
}

"""
columns and relationships of "ritual_type_enum"
"""
type ritual_type_enum {
  description: String!

  """An array relationship"""
  goals_rituals(
    """distinct select on columns"""
    distinct_on: [goals_rituals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_rituals_order_by!]

    """filter the rows returned"""
    where: goals_rituals_bool_exp
  ): [goals_rituals!]!

  """An aggregate relationship"""
  goals_rituals_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_rituals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_rituals_order_by!]

    """filter the rows returned"""
    where: goals_rituals_bool_exp
  ): goals_rituals_aggregate!
  ritual_type: String!
}

"""
aggregated selection of "ritual_type_enum"
"""
type ritual_type_enum_aggregate {
  aggregate: ritual_type_enum_aggregate_fields
  nodes: [ritual_type_enum!]!
}

"""
aggregate fields of "ritual_type_enum"
"""
type ritual_type_enum_aggregate_fields {
  count(columns: [ritual_type_enum_select_column!], distinct: Boolean): Int!
  max: ritual_type_enum_max_fields
  min: ritual_type_enum_min_fields
}

"""
Boolean expression to filter rows from the table "ritual_type_enum". All fields are combined with a logical 'AND'.
"""
input ritual_type_enum_bool_exp {
  _and: [ritual_type_enum_bool_exp!]
  _not: ritual_type_enum_bool_exp
  _or: [ritual_type_enum_bool_exp!]
  description: String_comparison_exp
  goals_rituals: goals_rituals_bool_exp
  goals_rituals_aggregate: goals_rituals_aggregate_bool_exp
  ritual_type: String_comparison_exp
}

"""
unique or primary key constraints on table "ritual_type_enum"
"""
enum ritual_type_enum_constraint {
  """
  unique or primary key constraint on columns "ritual_type"
  """
  ritual_type_enum_pkey
}

"""
input type for inserting data into table "ritual_type_enum"
"""
input ritual_type_enum_insert_input {
  description: String
  goals_rituals: goals_rituals_arr_rel_insert_input
  ritual_type: String
}

"""aggregate max on columns"""
type ritual_type_enum_max_fields {
  description: String
  ritual_type: String
}

"""aggregate min on columns"""
type ritual_type_enum_min_fields {
  description: String
  ritual_type: String
}

"""
response of any mutation on the table "ritual_type_enum"
"""
type ritual_type_enum_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [ritual_type_enum!]!
}

"""
input type for inserting object relation for remote table "ritual_type_enum"
"""
input ritual_type_enum_obj_rel_insert_input {
  data: ritual_type_enum_insert_input!

  """upsert condition"""
  on_conflict: ritual_type_enum_on_conflict
}

"""
on_conflict condition type for table "ritual_type_enum"
"""
input ritual_type_enum_on_conflict {
  constraint: ritual_type_enum_constraint!
  update_columns: [ritual_type_enum_update_column!]! = []
  where: ritual_type_enum_bool_exp
}

"""Ordering options when selecting data from "ritual_type_enum"."""
input ritual_type_enum_order_by {
  description: order_by
  goals_rituals_aggregate: goals_rituals_aggregate_order_by
  ritual_type: order_by
}

"""primary key columns input for table: ritual_type_enum"""
input ritual_type_enum_pk_columns_input {
  ritual_type: String!
}

"""
select columns of table "ritual_type_enum"
"""
enum ritual_type_enum_select_column {
  """column name"""
  description

  """column name"""
  ritual_type
}

"""
input type for updating data in table "ritual_type_enum"
"""
input ritual_type_enum_set_input {
  description: String
  ritual_type: String
}

"""
Streaming cursor of the table "ritual_type_enum"
"""
input ritual_type_enum_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ritual_type_enum_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ritual_type_enum_stream_cursor_value_input {
  description: String
  ritual_type: String
}

"""
update columns of table "ritual_type_enum"
"""
enum ritual_type_enum_update_column {
  """column name"""
  description

  """column name"""
  ritual_type
}

input ritual_type_enum_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: ritual_type_enum_set_input

  """filter the rows which have to be updated"""
  where: ritual_type_enum_bool_exp!
}

"""
columns and relationships of "sprints"
"""
type sprints {
  achievement: String
  cached: Boolean
  created_at: timestamptz!
  deleted_at: timestamptz
  description: String
  duration: Int!
  finished_at: timestamptz

  """An object relationship"""
  hero: heroes!
  id: uuid!
  img_path: String
  owner_id: uuid!
  parent_sprint_id: uuid
  sprint_days(
    """JSON select path"""
    path: String
  ): jsonb
  sprint_goals: String
  started_at: timestamptz
  title: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "sprints"
"""
type sprints_aggregate {
  aggregate: sprints_aggregate_fields
  nodes: [sprints!]!
}

input sprints_aggregate_bool_exp {
  bool_and: sprints_aggregate_bool_exp_bool_and
  bool_or: sprints_aggregate_bool_exp_bool_or
  count: sprints_aggregate_bool_exp_count
}

input sprints_aggregate_bool_exp_bool_and {
  arguments: sprints_select_column_sprints_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: sprints_bool_exp
  predicate: Boolean_comparison_exp!
}

input sprints_aggregate_bool_exp_bool_or {
  arguments: sprints_select_column_sprints_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: sprints_bool_exp
  predicate: Boolean_comparison_exp!
}

input sprints_aggregate_bool_exp_count {
  arguments: [sprints_select_column!]
  distinct: Boolean
  filter: sprints_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "sprints"
"""
type sprints_aggregate_fields {
  avg: sprints_avg_fields
  count(columns: [sprints_select_column!], distinct: Boolean): Int!
  max: sprints_max_fields
  min: sprints_min_fields
  stddev: sprints_stddev_fields
  stddev_pop: sprints_stddev_pop_fields
  stddev_samp: sprints_stddev_samp_fields
  sum: sprints_sum_fields
  var_pop: sprints_var_pop_fields
  var_samp: sprints_var_samp_fields
  variance: sprints_variance_fields
}

"""
order by aggregate values of table "sprints"
"""
input sprints_aggregate_order_by {
  avg: sprints_avg_order_by
  count: order_by
  max: sprints_max_order_by
  min: sprints_min_order_by
  stddev: sprints_stddev_order_by
  stddev_pop: sprints_stddev_pop_order_by
  stddev_samp: sprints_stddev_samp_order_by
  sum: sprints_sum_order_by
  var_pop: sprints_var_pop_order_by
  var_samp: sprints_var_samp_order_by
  variance: sprints_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input sprints_append_input {
  sprint_days: jsonb
}

"""
input type for inserting array relation for remote table "sprints"
"""
input sprints_arr_rel_insert_input {
  data: [sprints_insert_input!]!

  """upsert condition"""
  on_conflict: sprints_on_conflict
}

"""aggregate avg on columns"""
type sprints_avg_fields {
  duration: Float
}

"""
order by avg() on columns of table "sprints"
"""
input sprints_avg_order_by {
  duration: order_by
}

"""
Boolean expression to filter rows from the table "sprints". All fields are combined with a logical 'AND'.
"""
input sprints_bool_exp {
  _and: [sprints_bool_exp!]
  _not: sprints_bool_exp
  _or: [sprints_bool_exp!]
  achievement: String_comparison_exp
  cached: Boolean_comparison_exp
  created_at: timestamptz_comparison_exp
  deleted_at: timestamptz_comparison_exp
  description: String_comparison_exp
  duration: Int_comparison_exp
  finished_at: timestamptz_comparison_exp
  hero: heroes_bool_exp
  id: uuid_comparison_exp
  img_path: String_comparison_exp
  owner_id: uuid_comparison_exp
  parent_sprint_id: uuid_comparison_exp
  sprint_days: jsonb_comparison_exp
  sprint_goals: String_comparison_exp
  started_at: timestamptz_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "sprints"
"""
enum sprints_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  sprints_id_key

  """
  unique or primary key constraint on columns "id"
  """
  sprints_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input sprints_delete_at_path_input {
  sprint_days: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input sprints_delete_elem_input {
  sprint_days: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input sprints_delete_key_input {
  sprint_days: String
}

"""
input type for incrementing numeric columns in table "sprints"
"""
input sprints_inc_input {
  duration: Int
}

"""
input type for inserting data into table "sprints"
"""
input sprints_insert_input {
  achievement: String
  cached: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  duration: Int
  finished_at: timestamptz
  hero: heroes_obj_rel_insert_input
  id: uuid
  img_path: String
  owner_id: uuid
  parent_sprint_id: uuid
  sprint_days: jsonb
  sprint_goals: String
  started_at: timestamptz
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type sprints_max_fields {
  achievement: String
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  duration: Int
  finished_at: timestamptz
  id: uuid
  img_path: String
  owner_id: uuid
  parent_sprint_id: uuid
  sprint_goals: String
  started_at: timestamptz
  title: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "sprints"
"""
input sprints_max_order_by {
  achievement: order_by
  created_at: order_by
  deleted_at: order_by
  description: order_by
  duration: order_by
  finished_at: order_by
  id: order_by
  img_path: order_by
  owner_id: order_by
  parent_sprint_id: order_by
  sprint_goals: order_by
  started_at: order_by
  title: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type sprints_min_fields {
  achievement: String
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  duration: Int
  finished_at: timestamptz
  id: uuid
  img_path: String
  owner_id: uuid
  parent_sprint_id: uuid
  sprint_goals: String
  started_at: timestamptz
  title: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "sprints"
"""
input sprints_min_order_by {
  achievement: order_by
  created_at: order_by
  deleted_at: order_by
  description: order_by
  duration: order_by
  finished_at: order_by
  id: order_by
  img_path: order_by
  owner_id: order_by
  parent_sprint_id: order_by
  sprint_goals: order_by
  started_at: order_by
  title: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "sprints"
"""
type sprints_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [sprints!]!
}

"""
on_conflict condition type for table "sprints"
"""
input sprints_on_conflict {
  constraint: sprints_constraint!
  update_columns: [sprints_update_column!]! = []
  where: sprints_bool_exp
}

"""Ordering options when selecting data from "sprints"."""
input sprints_order_by {
  achievement: order_by
  cached: order_by
  created_at: order_by
  deleted_at: order_by
  description: order_by
  duration: order_by
  finished_at: order_by
  hero: heroes_order_by
  id: order_by
  img_path: order_by
  owner_id: order_by
  parent_sprint_id: order_by
  sprint_days: order_by
  sprint_goals: order_by
  started_at: order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: sprints"""
input sprints_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input sprints_prepend_input {
  sprint_days: jsonb
}

"""
select columns of table "sprints"
"""
enum sprints_select_column {
  """column name"""
  achievement

  """column name"""
  cached

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  description

  """column name"""
  duration

  """column name"""
  finished_at

  """column name"""
  id

  """column name"""
  img_path

  """column name"""
  owner_id

  """column name"""
  parent_sprint_id

  """column name"""
  sprint_days

  """column name"""
  sprint_goals

  """column name"""
  started_at

  """column name"""
  title

  """column name"""
  updated_at
}

"""
select "sprints_aggregate_bool_exp_bool_and_arguments_columns" columns of table "sprints"
"""
enum sprints_select_column_sprints_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  cached
}

"""
select "sprints_aggregate_bool_exp_bool_or_arguments_columns" columns of table "sprints"
"""
enum sprints_select_column_sprints_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  cached
}

"""
input type for updating data in table "sprints"
"""
input sprints_set_input {
  achievement: String
  cached: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  duration: Int
  finished_at: timestamptz
  id: uuid
  img_path: String
  owner_id: uuid
  parent_sprint_id: uuid
  sprint_days: jsonb
  sprint_goals: String
  started_at: timestamptz
  title: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type sprints_stddev_fields {
  duration: Float
}

"""
order by stddev() on columns of table "sprints"
"""
input sprints_stddev_order_by {
  duration: order_by
}

"""aggregate stddev_pop on columns"""
type sprints_stddev_pop_fields {
  duration: Float
}

"""
order by stddev_pop() on columns of table "sprints"
"""
input sprints_stddev_pop_order_by {
  duration: order_by
}

"""aggregate stddev_samp on columns"""
type sprints_stddev_samp_fields {
  duration: Float
}

"""
order by stddev_samp() on columns of table "sprints"
"""
input sprints_stddev_samp_order_by {
  duration: order_by
}

"""
Streaming cursor of the table "sprints"
"""
input sprints_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: sprints_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input sprints_stream_cursor_value_input {
  achievement: String
  cached: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  duration: Int
  finished_at: timestamptz
  id: uuid
  img_path: String
  owner_id: uuid
  parent_sprint_id: uuid
  sprint_days: jsonb
  sprint_goals: String
  started_at: timestamptz
  title: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type sprints_sum_fields {
  duration: Int
}

"""
order by sum() on columns of table "sprints"
"""
input sprints_sum_order_by {
  duration: order_by
}

"""
update columns of table "sprints"
"""
enum sprints_update_column {
  """column name"""
  achievement

  """column name"""
  cached

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  description

  """column name"""
  duration

  """column name"""
  finished_at

  """column name"""
  id

  """column name"""
  img_path

  """column name"""
  owner_id

  """column name"""
  parent_sprint_id

  """column name"""
  sprint_days

  """column name"""
  sprint_goals

  """column name"""
  started_at

  """column name"""
  title

  """column name"""
  updated_at
}

input sprints_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: sprints_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: sprints_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: sprints_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: sprints_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: sprints_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: sprints_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: sprints_set_input

  """filter the rows which have to be updated"""
  where: sprints_bool_exp!
}

"""aggregate var_pop on columns"""
type sprints_var_pop_fields {
  duration: Float
}

"""
order by var_pop() on columns of table "sprints"
"""
input sprints_var_pop_order_by {
  duration: order_by
}

"""aggregate var_samp on columns"""
type sprints_var_samp_fields {
  duration: Float
}

"""
order by var_samp() on columns of table "sprints"
"""
input sprints_var_samp_order_by {
  duration: order_by
}

"""aggregate variance on columns"""
type sprints_variance_fields {
  duration: Float
}

"""
order by variance() on columns of table "sprints"
"""
input sprints_variance_order_by {
  duration: order_by
}

"""
columns and relationships of "stories"
"""
type stories {
  archived: Boolean!
  created_at: timestamptz!
  created_by: uuid!
  deleted_at: timestamptz
  id: uuid!
  img_path: String
  is_favorite: Boolean!

  """An array relationship"""
  stories_messages(
    """distinct select on columns"""
    distinct_on: [stories_messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stories_messages_order_by!]

    """filter the rows returned"""
    where: stories_messages_bool_exp
  ): [stories_messages!]!

  """An aggregate relationship"""
  stories_messages_aggregate(
    """distinct select on columns"""
    distinct_on: [stories_messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stories_messages_order_by!]

    """filter the rows returned"""
    where: stories_messages_bool_exp
  ): stories_messages_aggregate!
  title: String!
  updated_at: timestamptz!
  updated_by: uuid!

  """An object relationship"""
  updated_by_user: heroes
  users: [uuid!]
}

"""
aggregated selection of "stories"
"""
type stories_aggregate {
  aggregate: stories_aggregate_fields
  nodes: [stories!]!
}

"""
aggregate fields of "stories"
"""
type stories_aggregate_fields {
  count(columns: [stories_select_column!], distinct: Boolean): Int!
  max: stories_max_fields
  min: stories_min_fields
}

"""
Boolean expression to filter rows from the table "stories". All fields are combined with a logical 'AND'.
"""
input stories_bool_exp {
  _and: [stories_bool_exp!]
  _not: stories_bool_exp
  _or: [stories_bool_exp!]
  archived: Boolean_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by: uuid_comparison_exp
  deleted_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  img_path: String_comparison_exp
  is_favorite: Boolean_comparison_exp
  stories_messages: stories_messages_bool_exp
  stories_messages_aggregate: stories_messages_aggregate_bool_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  updated_by: uuid_comparison_exp
  updated_by_user: heroes_bool_exp
  users: uuid_array_comparison_exp
}

"""
unique or primary key constraints on table "stories"
"""
enum stories_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  stories_pkey
}

"""
input type for inserting data into table "stories"
"""
input stories_insert_input {
  archived: Boolean
  created_at: timestamptz
  created_by: uuid
  deleted_at: timestamptz
  id: uuid
  img_path: String
  is_favorite: Boolean
  stories_messages: stories_messages_arr_rel_insert_input
  title: String
  updated_at: timestamptz
  updated_by: uuid
  updated_by_user: heroes_obj_rel_insert_input
  users: [uuid!]
}

"""aggregate max on columns"""
type stories_max_fields {
  created_at: timestamptz
  created_by: uuid
  deleted_at: timestamptz
  id: uuid
  img_path: String
  title: String
  updated_at: timestamptz
  updated_by: uuid
  users: [uuid!]
}

"""
columns and relationships of "stories_messages"
"""
type stories_messages {
  active_by_user: [uuid!]
  created_at: timestamptz!
  created_by: uuid!
  deleted_at: timestamptz
  description: String
  id: uuid!
  img_path: [String!]

  """An object relationship"""
  story: stories!
  story_id: uuid!
  updated_at: timestamptz!
  updated_by: uuid!

  """An object relationship"""
  updated_by_user: heroes
}

"""
aggregated selection of "stories_messages"
"""
type stories_messages_aggregate {
  aggregate: stories_messages_aggregate_fields
  nodes: [stories_messages!]!
}

input stories_messages_aggregate_bool_exp {
  count: stories_messages_aggregate_bool_exp_count
}

input stories_messages_aggregate_bool_exp_count {
  arguments: [stories_messages_select_column!]
  distinct: Boolean
  filter: stories_messages_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "stories_messages"
"""
type stories_messages_aggregate_fields {
  count(columns: [stories_messages_select_column!], distinct: Boolean): Int!
  max: stories_messages_max_fields
  min: stories_messages_min_fields
}

"""
order by aggregate values of table "stories_messages"
"""
input stories_messages_aggregate_order_by {
  count: order_by
  max: stories_messages_max_order_by
  min: stories_messages_min_order_by
}

"""
input type for inserting array relation for remote table "stories_messages"
"""
input stories_messages_arr_rel_insert_input {
  data: [stories_messages_insert_input!]!

  """upsert condition"""
  on_conflict: stories_messages_on_conflict
}

"""
Boolean expression to filter rows from the table "stories_messages". All fields are combined with a logical 'AND'.
"""
input stories_messages_bool_exp {
  _and: [stories_messages_bool_exp!]
  _not: stories_messages_bool_exp
  _or: [stories_messages_bool_exp!]
  active_by_user: uuid_array_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by: uuid_comparison_exp
  deleted_at: timestamptz_comparison_exp
  description: String_comparison_exp
  id: uuid_comparison_exp
  img_path: String_array_comparison_exp
  story: stories_bool_exp
  story_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  updated_by: uuid_comparison_exp
  updated_by_user: heroes_bool_exp
}

"""
unique or primary key constraints on table "stories_messages"
"""
enum stories_messages_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  stories_messages_pkey
}

"""
input type for inserting data into table "stories_messages"
"""
input stories_messages_insert_input {
  active_by_user: [uuid!]
  created_at: timestamptz
  created_by: uuid
  deleted_at: timestamptz
  description: String
  id: uuid
  img_path: [String!]
  story: stories_obj_rel_insert_input
  story_id: uuid
  updated_at: timestamptz
  updated_by: uuid
  updated_by_user: heroes_obj_rel_insert_input
}

"""aggregate max on columns"""
type stories_messages_max_fields {
  active_by_user: [uuid!]
  created_at: timestamptz
  created_by: uuid
  deleted_at: timestamptz
  description: String
  id: uuid
  img_path: [String!]
  story_id: uuid
  updated_at: timestamptz
  updated_by: uuid
}

"""
order by max() on columns of table "stories_messages"
"""
input stories_messages_max_order_by {
  active_by_user: order_by
  created_at: order_by
  created_by: order_by
  deleted_at: order_by
  description: order_by
  id: order_by
  img_path: order_by
  story_id: order_by
  updated_at: order_by
  updated_by: order_by
}

"""aggregate min on columns"""
type stories_messages_min_fields {
  active_by_user: [uuid!]
  created_at: timestamptz
  created_by: uuid
  deleted_at: timestamptz
  description: String
  id: uuid
  img_path: [String!]
  story_id: uuid
  updated_at: timestamptz
  updated_by: uuid
}

"""
order by min() on columns of table "stories_messages"
"""
input stories_messages_min_order_by {
  active_by_user: order_by
  created_at: order_by
  created_by: order_by
  deleted_at: order_by
  description: order_by
  id: order_by
  img_path: order_by
  story_id: order_by
  updated_at: order_by
  updated_by: order_by
}

"""
response of any mutation on the table "stories_messages"
"""
type stories_messages_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [stories_messages!]!
}

"""
on_conflict condition type for table "stories_messages"
"""
input stories_messages_on_conflict {
  constraint: stories_messages_constraint!
  update_columns: [stories_messages_update_column!]! = []
  where: stories_messages_bool_exp
}

"""Ordering options when selecting data from "stories_messages"."""
input stories_messages_order_by {
  active_by_user: order_by
  created_at: order_by
  created_by: order_by
  deleted_at: order_by
  description: order_by
  id: order_by
  img_path: order_by
  story: stories_order_by
  story_id: order_by
  updated_at: order_by
  updated_by: order_by
  updated_by_user: heroes_order_by
}

"""primary key columns input for table: stories_messages"""
input stories_messages_pk_columns_input {
  id: uuid!
}

"""
select columns of table "stories_messages"
"""
enum stories_messages_select_column {
  """column name"""
  active_by_user

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  deleted_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  img_path

  """column name"""
  story_id

  """column name"""
  updated_at

  """column name"""
  updated_by
}

"""
input type for updating data in table "stories_messages"
"""
input stories_messages_set_input {
  active_by_user: [uuid!]
  created_at: timestamptz
  created_by: uuid
  deleted_at: timestamptz
  description: String
  id: uuid
  img_path: [String!]
  story_id: uuid
  updated_at: timestamptz
  updated_by: uuid
}

"""
Streaming cursor of the table "stories_messages"
"""
input stories_messages_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: stories_messages_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input stories_messages_stream_cursor_value_input {
  active_by_user: [uuid!]
  created_at: timestamptz
  created_by: uuid
  deleted_at: timestamptz
  description: String
  id: uuid
  img_path: [String!]
  story_id: uuid
  updated_at: timestamptz
  updated_by: uuid
}

"""
update columns of table "stories_messages"
"""
enum stories_messages_update_column {
  """column name"""
  active_by_user

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  deleted_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  img_path

  """column name"""
  story_id

  """column name"""
  updated_at

  """column name"""
  updated_by
}

input stories_messages_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: stories_messages_set_input

  """filter the rows which have to be updated"""
  where: stories_messages_bool_exp!
}

"""aggregate min on columns"""
type stories_min_fields {
  created_at: timestamptz
  created_by: uuid
  deleted_at: timestamptz
  id: uuid
  img_path: String
  title: String
  updated_at: timestamptz
  updated_by: uuid
  users: [uuid!]
}

"""
response of any mutation on the table "stories"
"""
type stories_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [stories!]!
}

"""
input type for inserting object relation for remote table "stories"
"""
input stories_obj_rel_insert_input {
  data: stories_insert_input!

  """upsert condition"""
  on_conflict: stories_on_conflict
}

"""
on_conflict condition type for table "stories"
"""
input stories_on_conflict {
  constraint: stories_constraint!
  update_columns: [stories_update_column!]! = []
  where: stories_bool_exp
}

"""Ordering options when selecting data from "stories"."""
input stories_order_by {
  archived: order_by
  created_at: order_by
  created_by: order_by
  deleted_at: order_by
  id: order_by
  img_path: order_by
  is_favorite: order_by
  stories_messages_aggregate: stories_messages_aggregate_order_by
  title: order_by
  updated_at: order_by
  updated_by: order_by
  updated_by_user: heroes_order_by
  users: order_by
}

"""primary key columns input for table: stories"""
input stories_pk_columns_input {
  id: uuid!
}

"""
select columns of table "stories"
"""
enum stories_select_column {
  """column name"""
  archived

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  img_path

  """column name"""
  is_favorite

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  updated_by

  """column name"""
  users
}

"""
input type for updating data in table "stories"
"""
input stories_set_input {
  archived: Boolean
  created_at: timestamptz
  created_by: uuid
  deleted_at: timestamptz
  id: uuid
  img_path: String
  is_favorite: Boolean
  title: String
  updated_at: timestamptz
  updated_by: uuid
  users: [uuid!]
}

"""
Streaming cursor of the table "stories"
"""
input stories_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: stories_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input stories_stream_cursor_value_input {
  archived: Boolean
  created_at: timestamptz
  created_by: uuid
  deleted_at: timestamptz
  id: uuid
  img_path: String
  is_favorite: Boolean
  title: String
  updated_at: timestamptz
  updated_by: uuid
  users: [uuid!]
}

"""
update columns of table "stories"
"""
enum stories_update_column {
  """column name"""
  archived

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  img_path

  """column name"""
  is_favorite

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  updated_by

  """column name"""
  users
}

input stories_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: stories_set_input

  """filter the rows which have to be updated"""
  where: stories_bool_exp!
}

"""
columns and relationships of "stories_users"
"""
type stories_users {
  """An object relationship"""
  Story: stories

  """An object relationship"""
  User: heroes
  story_id: uuid!
  user_id: uuid!
}

"""
aggregated selection of "stories_users"
"""
type stories_users_aggregate {
  aggregate: stories_users_aggregate_fields
  nodes: [stories_users!]!
}

"""
aggregate fields of "stories_users"
"""
type stories_users_aggregate_fields {
  count(columns: [stories_users_select_column!], distinct: Boolean): Int!
  max: stories_users_max_fields
  min: stories_users_min_fields
}

"""
Boolean expression to filter rows from the table "stories_users". All fields are combined with a logical 'AND'.
"""
input stories_users_bool_exp {
  Story: stories_bool_exp
  User: heroes_bool_exp
  _and: [stories_users_bool_exp!]
  _not: stories_users_bool_exp
  _or: [stories_users_bool_exp!]
  story_id: uuid_comparison_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "stories_users"
"""
enum stories_users_constraint {
  """
  unique or primary key constraint on columns "user_id", "story_id"
  """
  stories_users_pkey

  """
  unique or primary key constraint on columns "story_id"
  """
  stories_users_story_id_key

  """
  unique or primary key constraint on columns "user_id"
  """
  stories_users_user_id_key
}

"""
input type for inserting data into table "stories_users"
"""
input stories_users_insert_input {
  Story: stories_obj_rel_insert_input
  User: heroes_obj_rel_insert_input
  story_id: uuid
  user_id: uuid
}

"""aggregate max on columns"""
type stories_users_max_fields {
  story_id: uuid
  user_id: uuid
}

"""aggregate min on columns"""
type stories_users_min_fields {
  story_id: uuid
  user_id: uuid
}

"""
response of any mutation on the table "stories_users"
"""
type stories_users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [stories_users!]!
}

"""
on_conflict condition type for table "stories_users"
"""
input stories_users_on_conflict {
  constraint: stories_users_constraint!
  update_columns: [stories_users_update_column!]! = []
  where: stories_users_bool_exp
}

"""Ordering options when selecting data from "stories_users"."""
input stories_users_order_by {
  Story: stories_order_by
  User: heroes_order_by
  story_id: order_by
  user_id: order_by
}

"""primary key columns input for table: stories_users"""
input stories_users_pk_columns_input {
  story_id: uuid!
  user_id: uuid!
}

"""
select columns of table "stories_users"
"""
enum stories_users_select_column {
  """column name"""
  story_id

  """column name"""
  user_id
}

"""
input type for updating data in table "stories_users"
"""
input stories_users_set_input {
  story_id: uuid
  user_id: uuid
}

"""
Streaming cursor of the table "stories_users"
"""
input stories_users_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: stories_users_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input stories_users_stream_cursor_value_input {
  story_id: uuid
  user_id: uuid
}

"""
update columns of table "stories_users"
"""
enum stories_users_update_column {
  """column name"""
  story_id

  """column name"""
  user_id
}

input stories_users_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: stories_users_set_input

  """filter the rows which have to be updated"""
  where: stories_users_bool_exp!
}

type subscription_root {
  """An array relationship"""
  achievements(
    """distinct select on columns"""
    distinct_on: [achievements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [achievements_order_by!]

    """filter the rows returned"""
    where: achievements_bool_exp
  ): [achievements!]!

  """An aggregate relationship"""
  achievements_aggregate(
    """distinct select on columns"""
    distinct_on: [achievements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [achievements_order_by!]

    """filter the rows returned"""
    where: achievements_bool_exp
  ): achievements_aggregate!

  """fetch data from the table: "achievements" using primary key columns"""
  achievements_by_pk(id: uuid!): achievements

  """
  fetch data from the table in a streaming manner: "achievements"
  """
  achievements_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [achievements_stream_cursor_input]!

    """filter the rows returned"""
    where: achievements_bool_exp
  ): [achievements!]!

  """An array relationship"""
  addons(
    """distinct select on columns"""
    distinct_on: [addons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addons_order_by!]

    """filter the rows returned"""
    where: addons_bool_exp
  ): [addons!]!

  """An aggregate relationship"""
  addons_aggregate(
    """distinct select on columns"""
    distinct_on: [addons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addons_order_by!]

    """filter the rows returned"""
    where: addons_bool_exp
  ): addons_aggregate!

  """fetch data from the table: "addons" using primary key columns"""
  addons_by_pk(addon: String!, owner_id: uuid!): addons

  """
  fetch data from the table: "addons_enum"
  """
  addons_enum(
    """distinct select on columns"""
    distinct_on: [addons_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addons_enum_order_by!]

    """filter the rows returned"""
    where: addons_enum_bool_exp
  ): [addons_enum!]!

  """
  fetch aggregated fields from the table: "addons_enum"
  """
  addons_enum_aggregate(
    """distinct select on columns"""
    distinct_on: [addons_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addons_enum_order_by!]

    """filter the rows returned"""
    where: addons_enum_bool_exp
  ): addons_enum_aggregate!

  """fetch data from the table: "addons_enum" using primary key columns"""
  addons_enum_by_pk(addon: String!): addons_enum

  """
  fetch data from the table in a streaming manner: "addons_enum"
  """
  addons_enum_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [addons_enum_stream_cursor_input]!

    """filter the rows returned"""
    where: addons_enum_bool_exp
  ): [addons_enum!]!

  """
  fetch data from the table in a streaming manner: "addons"
  """
  addons_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [addons_stream_cursor_input]!

    """filter the rows returned"""
    where: addons_bool_exp
  ): [addons!]!

  """
  fetch data from the table: "goal_difficulty_enum"
  """
  goal_difficulty_enum(
    """distinct select on columns"""
    distinct_on: [goal_difficulty_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goal_difficulty_enum_order_by!]

    """filter the rows returned"""
    where: goal_difficulty_enum_bool_exp
  ): [goal_difficulty_enum!]!

  """
  fetch aggregated fields from the table: "goal_difficulty_enum"
  """
  goal_difficulty_enum_aggregate(
    """distinct select on columns"""
    distinct_on: [goal_difficulty_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goal_difficulty_enum_order_by!]

    """filter the rows returned"""
    where: goal_difficulty_enum_bool_exp
  ): goal_difficulty_enum_aggregate!

  """
  fetch data from the table: "goal_difficulty_enum" using primary key columns
  """
  goal_difficulty_enum_by_pk(difficulty: String!): goal_difficulty_enum

  """
  fetch data from the table in a streaming manner: "goal_difficulty_enum"
  """
  goal_difficulty_enum_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [goal_difficulty_enum_stream_cursor_input]!

    """filter the rows returned"""
    where: goal_difficulty_enum_bool_exp
  ): [goal_difficulty_enum!]!

  """
  fetch data from the table: "goal_status_enum"
  """
  goal_status_enum(
    """distinct select on columns"""
    distinct_on: [goal_status_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goal_status_enum_order_by!]

    """filter the rows returned"""
    where: goal_status_enum_bool_exp
  ): [goal_status_enum!]!

  """
  fetch aggregated fields from the table: "goal_status_enum"
  """
  goal_status_enum_aggregate(
    """distinct select on columns"""
    distinct_on: [goal_status_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goal_status_enum_order_by!]

    """filter the rows returned"""
    where: goal_status_enum_bool_exp
  ): goal_status_enum_aggregate!

  """
  fetch data from the table: "goal_status_enum" using primary key columns
  """
  goal_status_enum_by_pk(status: String!): goal_status_enum

  """
  fetch data from the table in a streaming manner: "goal_status_enum"
  """
  goal_status_enum_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [goal_status_enum_stream_cursor_input]!

    """filter the rows returned"""
    where: goal_status_enum_bool_exp
  ): [goal_status_enum!]!

  """An array relationship"""
  goals(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): [goals!]!

  """An aggregate relationship"""
  goals_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): goals_aggregate!

  """fetch data from the table: "goals" using primary key columns"""
  goals_by_pk(id: uuid!): goals

  """An array relationship"""
  goals_rituals(
    """distinct select on columns"""
    distinct_on: [goals_rituals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_rituals_order_by!]

    """filter the rows returned"""
    where: goals_rituals_bool_exp
  ): [goals_rituals!]!

  """An aggregate relationship"""
  goals_rituals_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_rituals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_rituals_order_by!]

    """filter the rows returned"""
    where: goals_rituals_bool_exp
  ): goals_rituals_aggregate!

  """fetch data from the table: "goals_rituals" using primary key columns"""
  goals_rituals_by_pk(goal_id: uuid!, ritual_id: uuid!): goals_rituals

  """
  fetch data from the table in a streaming manner: "goals_rituals"
  """
  goals_rituals_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [goals_rituals_stream_cursor_input]!

    """filter the rows returned"""
    where: goals_rituals_bool_exp
  ): [goals_rituals!]!

  """An array relationship"""
  goals_slides(
    """distinct select on columns"""
    distinct_on: [goals_slides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_slides_order_by!]

    """filter the rows returned"""
    where: goals_slides_bool_exp
  ): [goals_slides!]!

  """An aggregate relationship"""
  goals_slides_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_slides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_slides_order_by!]

    """filter the rows returned"""
    where: goals_slides_bool_exp
  ): goals_slides_aggregate!

  """fetch data from the table: "goals_slides" using primary key columns"""
  goals_slides_by_pk(id: uuid!): goals_slides

  """
  fetch data from the table in a streaming manner: "goals_slides"
  """
  goals_slides_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [goals_slides_stream_cursor_input]!

    """filter the rows returned"""
    where: goals_slides_bool_exp
  ): [goals_slides!]!

  """
  fetch data from the table in a streaming manner: "goals"
  """
  goals_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [goals_stream_cursor_input]!

    """filter the rows returned"""
    where: goals_bool_exp
  ): [goals!]!

  """An array relationship"""
  heroes(
    """distinct select on columns"""
    distinct_on: [heroes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_order_by!]

    """filter the rows returned"""
    where: heroes_bool_exp
  ): [heroes!]!

  """An aggregate relationship"""
  heroes_aggregate(
    """distinct select on columns"""
    distinct_on: [heroes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_order_by!]

    """filter the rows returned"""
    where: heroes_bool_exp
  ): heroes_aggregate!

  """fetch data from the table: "heroes" using primary key columns"""
  heroes_by_pk(id: uuid!): heroes

  """
  fetch data from the table: "heroes_roles"
  """
  heroes_roles(
    """distinct select on columns"""
    distinct_on: [heroes_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_roles_order_by!]

    """filter the rows returned"""
    where: heroes_roles_bool_exp
  ): [heroes_roles!]!

  """
  fetch aggregated fields from the table: "heroes_roles"
  """
  heroes_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [heroes_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_roles_order_by!]

    """filter the rows returned"""
    where: heroes_roles_bool_exp
  ): heroes_roles_aggregate!

  """fetch data from the table: "heroes_roles" using primary key columns"""
  heroes_roles_by_pk(role: String!): heroes_roles

  """
  fetch data from the table in a streaming manner: "heroes_roles"
  """
  heroes_roles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [heroes_roles_stream_cursor_input]!

    """filter the rows returned"""
    where: heroes_roles_bool_exp
  ): [heroes_roles!]!

  """
  fetch data from the table in a streaming manner: "heroes"
  """
  heroes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [heroes_stream_cursor_input]!

    """filter the rows returned"""
    where: heroes_bool_exp
  ): [heroes!]!

  """
  fetch data from the table: "heroes_tokens"
  """
  heroes_tokens(
    """distinct select on columns"""
    distinct_on: [heroes_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_tokens_order_by!]

    """filter the rows returned"""
    where: heroes_tokens_bool_exp
  ): [heroes_tokens!]!

  """
  fetch aggregated fields from the table: "heroes_tokens"
  """
  heroes_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [heroes_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_tokens_order_by!]

    """filter the rows returned"""
    where: heroes_tokens_bool_exp
  ): heroes_tokens_aggregate!

  """fetch data from the table: "heroes_tokens" using primary key columns"""
  heroes_tokens_by_pk(session_id: uuid!): heroes_tokens

  """
  fetch data from the table in a streaming manner: "heroes_tokens"
  """
  heroes_tokens_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [heroes_tokens_stream_cursor_input]!

    """filter the rows returned"""
    where: heroes_tokens_bool_exp
  ): [heroes_tokens!]!

  """
  fetch data from the table: "notepad"
  """
  notepad(
    """distinct select on columns"""
    distinct_on: [notepad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notepad_order_by!]

    """filter the rows returned"""
    where: notepad_bool_exp
  ): [notepad!]!

  """
  fetch aggregated fields from the table: "notepad"
  """
  notepad_aggregate(
    """distinct select on columns"""
    distinct_on: [notepad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notepad_order_by!]

    """filter the rows returned"""
    where: notepad_bool_exp
  ): notepad_aggregate!

  """fetch data from the table: "notepad" using primary key columns"""
  notepad_by_pk(owner_id: uuid!): notepad

  """
  fetch data from the table in a streaming manner: "notepad"
  """
  notepad_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [notepad_stream_cursor_input]!

    """filter the rows returned"""
    where: notepad_bool_exp
  ): [notepad!]!

  """An array relationship"""
  notes(
    """distinct select on columns"""
    distinct_on: [notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notes_order_by!]

    """filter the rows returned"""
    where: notes_bool_exp
  ): [notes!]!

  """An aggregate relationship"""
  notes_aggregate(
    """distinct select on columns"""
    distinct_on: [notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notes_order_by!]

    """filter the rows returned"""
    where: notes_bool_exp
  ): notes_aggregate!

  """fetch data from the table: "notes" using primary key columns"""
  notes_by_pk(id: uuid!): notes

  """
  fetch data from the table: "notes_labels"
  """
  notes_labels(
    """distinct select on columns"""
    distinct_on: [notes_labels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notes_labels_order_by!]

    """filter the rows returned"""
    where: notes_labels_bool_exp
  ): [notes_labels!]!

  """
  fetch aggregated fields from the table: "notes_labels"
  """
  notes_labels_aggregate(
    """distinct select on columns"""
    distinct_on: [notes_labels_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notes_labels_order_by!]

    """filter the rows returned"""
    where: notes_labels_bool_exp
  ): notes_labels_aggregate!

  """fetch data from the table: "notes_labels" using primary key columns"""
  notes_labels_by_pk(id: uuid!): notes_labels

  """
  fetch data from the table in a streaming manner: "notes_labels"
  """
  notes_labels_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [notes_labels_stream_cursor_input]!

    """filter the rows returned"""
    where: notes_labels_bool_exp
  ): [notes_labels!]!

  """
  fetch data from the table in a streaming manner: "notes"
  """
  notes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [notes_stream_cursor_input]!

    """filter the rows returned"""
    where: notes_bool_exp
  ): [notes!]!

  """
  fetch data from the table: "privacy_enum"
  """
  privacy_enum(
    """distinct select on columns"""
    distinct_on: [privacy_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [privacy_enum_order_by!]

    """filter the rows returned"""
    where: privacy_enum_bool_exp
  ): [privacy_enum!]!

  """
  fetch aggregated fields from the table: "privacy_enum"
  """
  privacy_enum_aggregate(
    """distinct select on columns"""
    distinct_on: [privacy_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [privacy_enum_order_by!]

    """filter the rows returned"""
    where: privacy_enum_bool_exp
  ): privacy_enum_aggregate!

  """fetch data from the table: "privacy_enum" using primary key columns"""
  privacy_enum_by_pk(privacy: String!): privacy_enum

  """
  fetch data from the table in a streaming manner: "privacy_enum"
  """
  privacy_enum_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [privacy_enum_stream_cursor_input]!

    """filter the rows returned"""
    where: privacy_enum_bool_exp
  ): [privacy_enum!]!

  """
  fetch data from the table: "restore_codes"
  """
  restore_codes(
    """distinct select on columns"""
    distinct_on: [restore_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restore_codes_order_by!]

    """filter the rows returned"""
    where: restore_codes_bool_exp
  ): [restore_codes!]!

  """
  fetch aggregated fields from the table: "restore_codes"
  """
  restore_codes_aggregate(
    """distinct select on columns"""
    distinct_on: [restore_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restore_codes_order_by!]

    """filter the rows returned"""
    where: restore_codes_bool_exp
  ): restore_codes_aggregate!

  """fetch data from the table: "restore_codes" using primary key columns"""
  restore_codes_by_pk(id: uuid!): restore_codes

  """
  fetch data from the table: "restore_codes_enum"
  """
  restore_codes_enum(
    """distinct select on columns"""
    distinct_on: [restore_codes_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restore_codes_enum_order_by!]

    """filter the rows returned"""
    where: restore_codes_enum_bool_exp
  ): [restore_codes_enum!]!

  """
  fetch aggregated fields from the table: "restore_codes_enum"
  """
  restore_codes_enum_aggregate(
    """distinct select on columns"""
    distinct_on: [restore_codes_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restore_codes_enum_order_by!]

    """filter the rows returned"""
    where: restore_codes_enum_bool_exp
  ): restore_codes_enum_aggregate!

  """
  fetch data from the table: "restore_codes_enum" using primary key columns
  """
  restore_codes_enum_by_pk(type: String!): restore_codes_enum

  """
  fetch data from the table in a streaming manner: "restore_codes_enum"
  """
  restore_codes_enum_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [restore_codes_enum_stream_cursor_input]!

    """filter the rows returned"""
    where: restore_codes_enum_bool_exp
  ): [restore_codes_enum!]!

  """
  fetch data from the table in a streaming manner: "restore_codes"
  """
  restore_codes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [restore_codes_stream_cursor_input]!

    """filter the rows returned"""
    where: restore_codes_bool_exp
  ): [restore_codes!]!

  """
  fetch data from the table: "ritual_type_enum"
  """
  ritual_type_enum(
    """distinct select on columns"""
    distinct_on: [ritual_type_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ritual_type_enum_order_by!]

    """filter the rows returned"""
    where: ritual_type_enum_bool_exp
  ): [ritual_type_enum!]!

  """
  fetch aggregated fields from the table: "ritual_type_enum"
  """
  ritual_type_enum_aggregate(
    """distinct select on columns"""
    distinct_on: [ritual_type_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ritual_type_enum_order_by!]

    """filter the rows returned"""
    where: ritual_type_enum_bool_exp
  ): ritual_type_enum_aggregate!

  """
  fetch data from the table: "ritual_type_enum" using primary key columns
  """
  ritual_type_enum_by_pk(ritual_type: String!): ritual_type_enum

  """
  fetch data from the table in a streaming manner: "ritual_type_enum"
  """
  ritual_type_enum_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ritual_type_enum_stream_cursor_input]!

    """filter the rows returned"""
    where: ritual_type_enum_bool_exp
  ): [ritual_type_enum!]!

  """An array relationship"""
  sprints(
    """distinct select on columns"""
    distinct_on: [sprints_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sprints_order_by!]

    """filter the rows returned"""
    where: sprints_bool_exp
  ): [sprints!]!

  """An aggregate relationship"""
  sprints_aggregate(
    """distinct select on columns"""
    distinct_on: [sprints_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sprints_order_by!]

    """filter the rows returned"""
    where: sprints_bool_exp
  ): sprints_aggregate!

  """fetch data from the table: "sprints" using primary key columns"""
  sprints_by_pk(id: uuid!): sprints

  """
  fetch data from the table in a streaming manner: "sprints"
  """
  sprints_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [sprints_stream_cursor_input]!

    """filter the rows returned"""
    where: sprints_bool_exp
  ): [sprints!]!

  """
  fetch data from the table: "stories"
  """
  stories(
    """distinct select on columns"""
    distinct_on: [stories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stories_order_by!]

    """filter the rows returned"""
    where: stories_bool_exp
  ): [stories!]!

  """
  fetch aggregated fields from the table: "stories"
  """
  stories_aggregate(
    """distinct select on columns"""
    distinct_on: [stories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stories_order_by!]

    """filter the rows returned"""
    where: stories_bool_exp
  ): stories_aggregate!

  """fetch data from the table: "stories" using primary key columns"""
  stories_by_pk(id: uuid!): stories

  """An array relationship"""
  stories_messages(
    """distinct select on columns"""
    distinct_on: [stories_messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stories_messages_order_by!]

    """filter the rows returned"""
    where: stories_messages_bool_exp
  ): [stories_messages!]!

  """An aggregate relationship"""
  stories_messages_aggregate(
    """distinct select on columns"""
    distinct_on: [stories_messages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stories_messages_order_by!]

    """filter the rows returned"""
    where: stories_messages_bool_exp
  ): stories_messages_aggregate!

  """
  fetch data from the table: "stories_messages" using primary key columns
  """
  stories_messages_by_pk(id: uuid!): stories_messages

  """
  fetch data from the table in a streaming manner: "stories_messages"
  """
  stories_messages_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [stories_messages_stream_cursor_input]!

    """filter the rows returned"""
    where: stories_messages_bool_exp
  ): [stories_messages!]!

  """
  fetch data from the table in a streaming manner: "stories"
  """
  stories_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [stories_stream_cursor_input]!

    """filter the rows returned"""
    where: stories_bool_exp
  ): [stories!]!

  """
  fetch data from the table: "stories_users"
  """
  stories_users(
    """distinct select on columns"""
    distinct_on: [stories_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stories_users_order_by!]

    """filter the rows returned"""
    where: stories_users_bool_exp
  ): [stories_users!]!

  """
  fetch aggregated fields from the table: "stories_users"
  """
  stories_users_aggregate(
    """distinct select on columns"""
    distinct_on: [stories_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stories_users_order_by!]

    """filter the rows returned"""
    where: stories_users_bool_exp
  ): stories_users_aggregate!

  """fetch data from the table: "stories_users" using primary key columns"""
  stories_users_by_pk(story_id: uuid!, user_id: uuid!): stories_users

  """
  fetch data from the table in a streaming manner: "stories_users"
  """
  stories_users_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [stories_users_stream_cursor_input]!

    """filter the rows returned"""
    where: stories_users_bool_exp
  ): [stories_users!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_array_comparison_exp {
  """is the array contained in the given array value"""
  _contained_in: [uuid!]

  """does the array contain the given value"""
  _contains: [uuid!]
  _eq: [uuid!]
  _gt: [uuid!]
  _gte: [uuid!]
  _in: [[uuid!]!]
  _is_null: Boolean
  _lt: [uuid!]
  _lte: [uuid!]
  _neq: [uuid!]
  _nin: [[uuid!]!]
}

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}